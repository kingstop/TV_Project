/*
1. 包格式:
    pkg_len(u32) + mask(u16) + crc_no(u32) + pb_flag(u32) + name_len(u32) + name(string) + msgbody(string)
    [注]: pkg_len值包含自身占用的长度(即uint32的长度), 按主机字节序打包
            pkg_len: sizeof(u32) * 4 + sizeof(u16) + name_len + sizeof(msgbody)

2. 使用规则:
    (1) 字段只能加, 不能减;
    (2) 增加的字段只能是 optional 类型, 且必须给出 default 值, 最好还有相关说明;
*/

package IPlatformPayProto;

/*ipay 错误码*/ 
enum ipay_err_code_t {
    IPAY_ERR_OK = 0; //没有错误 

    //BASE 1000
    IPAY_ERR_SYS_BUSY             = 1001; // game server忙 
    IPAY_ERR_INV_PKGLEN           = 1002; // 包长和收到的数据不匹配 
    IPAY_ERR_UNSUPPORTED_MSG      = 1003; // 不支持的消息 
    IPAY_ERR_NOT_ENOUGH_RES       = 1004; // 系统资源不足 
    IPAY_ERR_UNSUPPORTED_MSG_TYPE = 1005; // 不支持该协议 
    IPAY_ERR_NOFOUND_SERVER       = 1006; // 找不到game服务器 
    IPAY_ERR_INV_SIGN             = 1007; // 连接非法(sign验证失败） 

    //proxy <--> game server
    IPAY_ERR_HAS_REGISTERED       = 2001; // 游戏已经注册过
    IPAY_ERR_REG_TIMEOUT          = 2002; // 游戏注册超时
    IPAY_ERR_NO_MATCH_REG_FD      = 2003; // fd未注册
    IPAY_ERR_WRONG_ORDER          = 2004; // 订单验证失败
    IPAY_ERR_NO_SUCH_ITEM         = 2005; // 商品ID不存在
    IPAY_ERR_ORDER_IN_HANDLING    = 2006; // 订单正在处理中
    IPAY_ERR_ORDER_HAS_HANDLED    = 2007; // 订单已经处理过
    IPAY_ERR_GAME_SERVER_DOWN     = 2008; // 游戏sever连接断开

    //proxy <--> boss client
    IPAY_ERR_NO_REG_GAME       = 3001; // 游戏还未注册

    //game server --> boss client
    IPAY_ERR_NO_SUCH_USER     = 4001; // 用户不存在
    IPAY_ERR_NO_SUCH_ORDER    = 4002; // 订单不存在
    IPAY_ERR_ITEM_DECODE_FAIL = 4003; // 订单商品信息解析失败
}

/** @brief Game向Proxy注册包 */
message MsgG2PRegisterReq {
	required uint32 game_id = 1;
	required uint32 server_id = 2;
	required uint32 server_flag = 3;
}
message MsgP2GRegisterRsp {
	required int32  err_code = 1;//处理结果: 0-成功,其他表示失败
	optional string err_msg = 2 [default = ""];
}
/** @brief Proxy给Game的被踢掉线数据包 */
message MsgP2GKickOffAck {
	required uint32  last_reg_time = 1;//最近一次成功注册时间
}

/** @brief Proxy给Game的订单包 */
message MsgP2GOrderNotifyReq {
	required uint32  status = 1;//订单状态: 0-成功,其他表示失败
	required uint32 server_id = 2;
	required uint32 server_flag = 3;
	required uint64 user_id = 4;
	required uint32 channel_id = 5;//支付渠道
	required uint32 order_id = 6;
	required string product_id = 7;
	required uint32 price = 8;
	optional string ext_data = 9;//扩展字段
}
message MsgG2POrderNotifyRsp {
	required int32  err_code = 1;//处理结果: 0-成功,其他表示失败
	required uint32 order_id = 2;
}

/** @brief 返回错误码统一协议 */
message ErrorCodeAck {
    required int32  err_code = 1;//处理结果: 0-成功,其他表示失败
    optional string err_msg = 2 [default = "default error"];
    optional string ori_msg_typename = 3 [default = "Unknown"];
}

