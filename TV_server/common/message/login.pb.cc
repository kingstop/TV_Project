// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace message {

namespace {

const ::google::protobuf::Descriptor* VersionTg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VersionTg_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterAccountRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterAccountRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterAccountFaildACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterAccountFaildACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientExit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientExit_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2SPlatformVerifyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2SPlatformVerifyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2CPlatformVerifyACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2CPlatformVerifyACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgS2CPingNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgS2CPingNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgC2SPingNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgC2SPingNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* enumLoginResult_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_login_2eproto() {
  protobuf_AddDesc_login_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "login.proto");
  GOOGLE_CHECK(file != NULL);
  VersionTg_descriptor_ = file->message_type(0);
  static const int VersionTg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionTg, number_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionTg, number_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionTg, number_3_),
  };
  VersionTg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VersionTg_descriptor_,
      VersionTg::default_instance_,
      VersionTg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionTg, _has_bits_[0]),
      -1,
      -1,
      sizeof(VersionTg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionTg, _internal_metadata_),
      -1);
  LoginRequest_descriptor_ = file->message_type(1);
  static const int LoginRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, pwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, channel_),
  };
  LoginRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginRequest_descriptor_,
      LoginRequest::default_instance_,
      LoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(LoginRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _internal_metadata_),
      -1);
  RegisterAccountRequest_descriptor_ = file->message_type(2);
  static const int RegisterAccountRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterAccountRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterAccountRequest, pwd_),
  };
  RegisterAccountRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegisterAccountRequest_descriptor_,
      RegisterAccountRequest::default_instance_,
      RegisterAccountRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterAccountRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(RegisterAccountRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterAccountRequest, _internal_metadata_),
      -1);
  RegisterAccountFaildACK_descriptor_ = file->message_type(3);
  static const int RegisterAccountFaildACK_offsets_[1] = {
  };
  RegisterAccountFaildACK_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegisterAccountFaildACK_descriptor_,
      RegisterAccountFaildACK::default_instance_,
      RegisterAccountFaildACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterAccountFaildACK, _has_bits_[0]),
      -1,
      -1,
      sizeof(RegisterAccountFaildACK),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterAccountFaildACK, _internal_metadata_),
      -1);
  LoginResponse_descriptor_ = file->message_type(4);
  static const int LoginResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, gate_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, gate_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, user_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, version_),
  };
  LoginResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginResponse_descriptor_,
      LoginResponse::default_instance_,
      LoginResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(LoginResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _internal_metadata_),
      -1);
  LoginGame_descriptor_ = file->message_type(5);
  static const int LoginGame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginGame, user_account_),
  };
  LoginGame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginGame_descriptor_,
      LoginGame::default_instance_,
      LoginGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginGame, _has_bits_[0]),
      -1,
      -1,
      sizeof(LoginGame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginGame, _internal_metadata_),
      -1);
  ClientExit_descriptor_ = file->message_type(6);
  static const int ClientExit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientExit, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientExit, user_account_),
  };
  ClientExit_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClientExit_descriptor_,
      ClientExit::default_instance_,
      ClientExit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientExit, _has_bits_[0]),
      -1,
      -1,
      sizeof(ClientExit),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientExit, _internal_metadata_),
      -1);
  C2SPlatformVerifyReq_descriptor_ = file->message_type(7);
  static const int C2SPlatformVerifyReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SPlatformVerifyReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SPlatformVerifyReq, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SPlatformVerifyReq, app_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SPlatformVerifyReq, token_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SPlatformVerifyReq, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SPlatformVerifyReq, extra_data_),
  };
  C2SPlatformVerifyReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      C2SPlatformVerifyReq_descriptor_,
      C2SPlatformVerifyReq::default_instance_,
      C2SPlatformVerifyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SPlatformVerifyReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(C2SPlatformVerifyReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SPlatformVerifyReq, _internal_metadata_),
      -1);
  S2CPlatformVerifyACK_descriptor_ = file->message_type(8);
  static const int S2CPlatformVerifyACK_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CPlatformVerifyACK, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CPlatformVerifyACK, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CPlatformVerifyACK, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CPlatformVerifyACK, success_),
  };
  S2CPlatformVerifyACK_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      S2CPlatformVerifyACK_descriptor_,
      S2CPlatformVerifyACK::default_instance_,
      S2CPlatformVerifyACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CPlatformVerifyACK, _has_bits_[0]),
      -1,
      -1,
      sizeof(S2CPlatformVerifyACK),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CPlatformVerifyACK, _internal_metadata_),
      -1);
  MsgS2CPingNotify_descriptor_ = file->message_type(9);
  static const int MsgS2CPingNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CPingNotify, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CPingNotify, ping_count_),
  };
  MsgS2CPingNotify_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgS2CPingNotify_descriptor_,
      MsgS2CPingNotify::default_instance_,
      MsgS2CPingNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CPingNotify, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgS2CPingNotify),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CPingNotify, _internal_metadata_),
      -1);
  MsgC2SPingNotify_descriptor_ = file->message_type(10);
  static const int MsgC2SPingNotify_offsets_[1] = {
  };
  MsgC2SPingNotify_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgC2SPingNotify_descriptor_,
      MsgC2SPingNotify::default_instance_,
      MsgC2SPingNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SPingNotify, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgC2SPingNotify),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SPingNotify, _internal_metadata_),
      -1);
  enumLoginResult_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_login_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VersionTg_descriptor_, &VersionTg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginRequest_descriptor_, &LoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegisterAccountRequest_descriptor_, &RegisterAccountRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegisterAccountFaildACK_descriptor_, &RegisterAccountFaildACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginResponse_descriptor_, &LoginResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginGame_descriptor_, &LoginGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClientExit_descriptor_, &ClientExit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      C2SPlatformVerifyReq_descriptor_, &C2SPlatformVerifyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      S2CPlatformVerifyACK_descriptor_, &S2CPlatformVerifyACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgS2CPingNotify_descriptor_, &MsgS2CPingNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgC2SPingNotify_descriptor_, &MsgC2SPingNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_login_2eproto() {
  delete VersionTg::default_instance_;
  delete VersionTg_reflection_;
  delete LoginRequest::default_instance_;
  delete LoginRequest_reflection_;
  delete RegisterAccountRequest::default_instance_;
  delete RegisterAccountRequest_reflection_;
  delete RegisterAccountFaildACK::default_instance_;
  delete RegisterAccountFaildACK_reflection_;
  delete LoginResponse::default_instance_;
  delete LoginResponse_reflection_;
  delete LoginGame::default_instance_;
  delete LoginGame_reflection_;
  delete ClientExit::default_instance_;
  delete ClientExit_reflection_;
  delete C2SPlatformVerifyReq::default_instance_;
  delete C2SPlatformVerifyReq_reflection_;
  delete S2CPlatformVerifyACK::default_instance_;
  delete S2CPlatformVerifyACK_reflection_;
  delete MsgS2CPingNotify::default_instance_;
  delete MsgS2CPingNotify_reflection_;
  delete MsgC2SPingNotify::default_instance_;
  delete MsgC2SPingNotify_reflection_;
}

void protobuf_AddDesc_login_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::message::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013login.proto\022\007message\032\014common.proto\"A\n\t"
    "VersionTg\022\020\n\010number_1\030\001 \002(\005\022\020\n\010number_2\030"
    "\002 \002(\005\022\020\n\010number_3\030\003 \002(\005\"_\n\014LoginRequest\022"
    "\014\n\004name\030\001 \001(\t\022\013\n\003pwd\030\002 \001(\t\022#\n\007version\030\003 "
    "\001(\0132\022.message.VersionTg\022\017\n\007channel\030\004 \001(\005"
    "\"3\n\026RegisterAccountRequest\022\014\n\004name\030\001 \002(\t"
    "\022\013\n\003pwd\030\002 \002(\t\"\031\n\027RegisterAccountFaildACK"
    "\"\230\001\n\rLoginResponse\022\017\n\007gate_ip\030\001 \001(\t\022\021\n\tg"
    "ate_port\030\002 \001(\r\022\024\n\014user_account\030\003 \001(\r\022(\n\006"
    "result\030\004 \001(\0162\030.message.enumLoginResult\022#"
    "\n\007version\030\005 \001(\0132\022.message.VersionTg\"!\n\tL"
    "oginGame\022\024\n\014user_account\030\001 \002(\r\"2\n\nClient"
    "Exit\022\016\n\006charid\030\001 \001(\r\022\024\n\014user_account\030\002 \001"
    "(\004\"\202\001\n\024C2SPlatformVerifyReq\022\017\n\007user_id\030\001"
    " \002(\t\022\016\n\006app_id\030\002 \002(\t\022\017\n\007app_key\030\003 \002(\t\022\020\n"
    "\010token_id\030\004 \002(\t\022\022\n\nchannel_id\030\005 \002(\005\022\022\n\ne"
    "xtra_data\030\006 \002(\t\"Z\n\024S2CPlatformVerifyACK\022"
    "\017\n\007user_id\030\001 \002(\t\022\021\n\tnick_name\030\002 \002(\t\022\r\n\005t"
    "oken\030\003 \002(\t\022\017\n\007success\030\004 \002(\010\"4\n\020MsgS2CPin"
    "gNotify\022\014\n\004time\030\001 \002(\005\022\022\n\nping_count\030\002 \002("
    "\005\"\022\n\020MsgC2SPingNotify*\220\002\n\017enumLoginResul"
    "t\022\033\n\027enumLoginResult_Success\020\000\022\030\n\024enumLo"
    "ginResult_Fail\020\001\022\034\n\030enumLoginResult_Name"
    "Fail\020\002\022\033\n\027enumLoginResult_PwdFail\020\003\022\035\n\031e"
    "numLoginResult_HaveLogin\020\004\022 \n\034enumLoginR"
    "esult_ErrorVersion\020\005\022 \n\034enumLoginResult_"
    "ErrorChannel\020\006\022(\n$enumLoginResult_ErrorN"
    "eedThirdVerify\020\007", 1096);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "login.proto", &protobuf_RegisterTypes);
  VersionTg::default_instance_ = new VersionTg();
  LoginRequest::default_instance_ = new LoginRequest();
  RegisterAccountRequest::default_instance_ = new RegisterAccountRequest();
  RegisterAccountFaildACK::default_instance_ = new RegisterAccountFaildACK();
  LoginResponse::default_instance_ = new LoginResponse();
  LoginGame::default_instance_ = new LoginGame();
  ClientExit::default_instance_ = new ClientExit();
  C2SPlatformVerifyReq::default_instance_ = new C2SPlatformVerifyReq();
  S2CPlatformVerifyACK::default_instance_ = new S2CPlatformVerifyACK();
  MsgS2CPingNotify::default_instance_ = new MsgS2CPingNotify();
  MsgC2SPingNotify::default_instance_ = new MsgC2SPingNotify();
  VersionTg::default_instance_->InitAsDefaultInstance();
  LoginRequest::default_instance_->InitAsDefaultInstance();
  RegisterAccountRequest::default_instance_->InitAsDefaultInstance();
  RegisterAccountFaildACK::default_instance_->InitAsDefaultInstance();
  LoginResponse::default_instance_->InitAsDefaultInstance();
  LoginGame::default_instance_->InitAsDefaultInstance();
  ClientExit::default_instance_->InitAsDefaultInstance();
  C2SPlatformVerifyReq::default_instance_->InitAsDefaultInstance();
  S2CPlatformVerifyACK::default_instance_->InitAsDefaultInstance();
  MsgS2CPingNotify::default_instance_->InitAsDefaultInstance();
  MsgC2SPingNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_login_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_login_2eproto {
  StaticDescriptorInitializer_login_2eproto() {
    protobuf_AddDesc_login_2eproto();
  }
} static_descriptor_initializer_login_2eproto_;
const ::google::protobuf::EnumDescriptor* enumLoginResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enumLoginResult_descriptor_;
}
bool enumLoginResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int VersionTg::kNumber1FieldNumber;
const int VersionTg::kNumber2FieldNumber;
const int VersionTg::kNumber3FieldNumber;
#endif  // !_MSC_VER

VersionTg::VersionTg()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.VersionTg)
}

void VersionTg::InitAsDefaultInstance() {
}

VersionTg::VersionTg(const VersionTg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.VersionTg)
}

void VersionTg::SharedCtor() {
  _cached_size_ = 0;
  number_1_ = 0;
  number_2_ = 0;
  number_3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VersionTg::~VersionTg() {
  // @@protoc_insertion_point(destructor:message.VersionTg)
  SharedDtor();
}

void VersionTg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VersionTg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VersionTg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VersionTg_descriptor_;
}

const VersionTg& VersionTg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

VersionTg* VersionTg::default_instance_ = NULL;

VersionTg* VersionTg::New(::google::protobuf::Arena* arena) const {
  VersionTg* n = new VersionTg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VersionTg::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VersionTg*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(number_1_, number_3_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VersionTg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.VersionTg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 number_1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_1_)));
          set_has_number_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_number_2;
        break;
      }

      // required int32 number_2 = 2;
      case 2: {
        if (tag == 16) {
         parse_number_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_2_)));
          set_has_number_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_number_3;
        break;
      }

      // required int32 number_3 = 3;
      case 3: {
        if (tag == 24) {
         parse_number_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_3_)));
          set_has_number_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.VersionTg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.VersionTg)
  return false;
#undef DO_
}

void VersionTg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.VersionTg)
  // required int32 number_1 = 1;
  if (has_number_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->number_1(), output);
  }

  // required int32 number_2 = 2;
  if (has_number_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->number_2(), output);
  }

  // required int32 number_3 = 3;
  if (has_number_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->number_3(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.VersionTg)
}

::google::protobuf::uint8* VersionTg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.VersionTg)
  // required int32 number_1 = 1;
  if (has_number_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->number_1(), target);
  }

  // required int32 number_2 = 2;
  if (has_number_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->number_2(), target);
  }

  // required int32 number_3 = 3;
  if (has_number_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->number_3(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.VersionTg)
  return target;
}

int VersionTg::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_number_1()) {
    // required int32 number_1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->number_1());
  }

  if (has_number_2()) {
    // required int32 number_2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->number_2());
  }

  if (has_number_3()) {
    // required int32 number_3 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->number_3());
  }

  return total_size;
}
int VersionTg::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 number_1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->number_1());

    // required int32 number_2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->number_2());

    // required int32 number_3 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->number_3());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VersionTg::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VersionTg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VersionTg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VersionTg::MergeFrom(const VersionTg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number_1()) {
      set_number_1(from.number_1());
    }
    if (from.has_number_2()) {
      set_number_2(from.number_2());
    }
    if (from.has_number_3()) {
      set_number_3(from.number_3());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void VersionTg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionTg::CopyFrom(const VersionTg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionTg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void VersionTg::Swap(VersionTg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VersionTg::InternalSwap(VersionTg* other) {
  std::swap(number_1_, other->number_1_);
  std::swap(number_2_, other->number_2_);
  std::swap(number_3_, other->number_3_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VersionTg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VersionTg_descriptor_;
  metadata.reflection = VersionTg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VersionTg

// required int32 number_1 = 1;
 bool VersionTg::has_number_1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void VersionTg::set_has_number_1() {
  _has_bits_[0] |= 0x00000001u;
}
 void VersionTg::clear_has_number_1() {
  _has_bits_[0] &= ~0x00000001u;
}
 void VersionTg::clear_number_1() {
  number_1_ = 0;
  clear_has_number_1();
}
 ::google::protobuf::int32 VersionTg::number_1() const {
  // @@protoc_insertion_point(field_get:message.VersionTg.number_1)
  return number_1_;
}
 void VersionTg::set_number_1(::google::protobuf::int32 value) {
  set_has_number_1();
  number_1_ = value;
  // @@protoc_insertion_point(field_set:message.VersionTg.number_1)
}

// required int32 number_2 = 2;
 bool VersionTg::has_number_2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void VersionTg::set_has_number_2() {
  _has_bits_[0] |= 0x00000002u;
}
 void VersionTg::clear_has_number_2() {
  _has_bits_[0] &= ~0x00000002u;
}
 void VersionTg::clear_number_2() {
  number_2_ = 0;
  clear_has_number_2();
}
 ::google::protobuf::int32 VersionTg::number_2() const {
  // @@protoc_insertion_point(field_get:message.VersionTg.number_2)
  return number_2_;
}
 void VersionTg::set_number_2(::google::protobuf::int32 value) {
  set_has_number_2();
  number_2_ = value;
  // @@protoc_insertion_point(field_set:message.VersionTg.number_2)
}

// required int32 number_3 = 3;
 bool VersionTg::has_number_3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void VersionTg::set_has_number_3() {
  _has_bits_[0] |= 0x00000004u;
}
 void VersionTg::clear_has_number_3() {
  _has_bits_[0] &= ~0x00000004u;
}
 void VersionTg::clear_number_3() {
  number_3_ = 0;
  clear_has_number_3();
}
 ::google::protobuf::int32 VersionTg::number_3() const {
  // @@protoc_insertion_point(field_get:message.VersionTg.number_3)
  return number_3_;
}
 void VersionTg::set_number_3(::google::protobuf::int32 value) {
  set_has_number_3();
  number_3_ = value;
  // @@protoc_insertion_point(field_set:message.VersionTg.number_3)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int LoginRequest::kNameFieldNumber;
const int LoginRequest::kPwdFieldNumber;
const int LoginRequest::kVersionFieldNumber;
const int LoginRequest::kChannelFieldNumber;
#endif  // !_MSC_VER

LoginRequest::LoginRequest()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.LoginRequest)
}

void LoginRequest::InitAsDefaultInstance() {
  version_ = const_cast< ::message::VersionTg*>(&::message::VersionTg::default_instance());
}

LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.LoginRequest)
}

void LoginRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = NULL;
  channel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:message.LoginRequest)
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete version_;
  }
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRequest_descriptor_;
}

const LoginRequest& LoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

LoginRequest* LoginRequest::default_instance_ = NULL;

LoginRequest* LoginRequest::New(::google::protobuf::Arena* arena) const {
  LoginRequest* n = new LoginRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginRequest::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_pwd()) {
      pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_version()) {
      if (version_ != NULL) version_->::message::VersionTg::Clear();
    }
    channel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.LoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message.LoginRequest.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pwd;
        break;
      }

      // optional string pwd = 2;
      case 2: {
        if (tag == 18) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message.LoginRequest.pwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }

      // optional .message.VersionTg version = 3;
      case 3: {
        if (tag == 26) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_channel;
        break;
      }

      // optional int32 channel = 4;
      case 4: {
        if (tag == 32) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.LoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.LoginRequest)
  return false;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.LoginRequest)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.LoginRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string pwd = 2;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.LoginRequest.pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pwd(), output);
  }

  // optional .message.VersionTg version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->version_, output);
  }

  // optional int32 channel = 4;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->channel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.LoginRequest)
}

::google::protobuf::uint8* LoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.LoginRequest)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.LoginRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string pwd = 2;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.LoginRequest.pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pwd(), target);
  }

  // optional .message.VersionTg version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->version_, target);
  }

  // optional int32 channel = 4;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->channel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.LoginRequest)
  return target;
}

int LoginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string pwd = 2;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

    // optional .message.VersionTg version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->version_);
    }

    // optional int32 channel = 4;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LoginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_pwd()) {
      set_has_pwd();
      pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
    }
    if (from.has_version()) {
      mutable_version()->::message::VersionTg::MergeFrom(from.version());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {

  if (has_version()) {
    if (!this->version_->IsInitialized()) return false;
  }
  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRequest::InternalSwap(LoginRequest* other) {
  name_.Swap(&other->name_);
  pwd_.Swap(&other->pwd_);
  std::swap(version_, other->version_);
  std::swap(channel_, other->channel_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRequest_descriptor_;
  metadata.reflection = LoginRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginRequest

// optional string name = 1;
 bool LoginRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void LoginRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
 void LoginRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
 void LoginRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& LoginRequest::name() const {
  // @@protoc_insertion_point(field_get:message.LoginRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequest::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.LoginRequest.name)
}
 void LoginRequest::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.LoginRequest.name)
}
 void LoginRequest::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.LoginRequest.name)
}
 ::std::string* LoginRequest::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:message.LoginRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginRequest::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:message.LoginRequest.name)
}

// optional string pwd = 2;
 bool LoginRequest::has_pwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void LoginRequest::set_has_pwd() {
  _has_bits_[0] |= 0x00000002u;
}
 void LoginRequest::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000002u;
}
 void LoginRequest::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwd();
}
 const ::std::string& LoginRequest::pwd() const {
  // @@protoc_insertion_point(field_get:message.LoginRequest.pwd)
  return pwd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequest::set_pwd(const ::std::string& value) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.LoginRequest.pwd)
}
 void LoginRequest::set_pwd(const char* value) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.LoginRequest.pwd)
}
 void LoginRequest::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.LoginRequest.pwd)
}
 ::std::string* LoginRequest::mutable_pwd() {
  set_has_pwd();
  // @@protoc_insertion_point(field_mutable:message.LoginRequest.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginRequest::release_pwd() {
  clear_has_pwd();
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequest::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    set_has_pwd();
  } else {
    clear_has_pwd();
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:message.LoginRequest.pwd)
}

// optional .message.VersionTg version = 3;
 bool LoginRequest::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void LoginRequest::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
 void LoginRequest::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
 void LoginRequest::clear_version() {
  if (version_ != NULL) version_->::message::VersionTg::Clear();
  clear_has_version();
}
 const ::message::VersionTg& LoginRequest::version() const {
  // @@protoc_insertion_point(field_get:message.LoginRequest.version)
  return version_ != NULL ? *version_ : *default_instance_->version_;
}
 ::message::VersionTg* LoginRequest::mutable_version() {
  set_has_version();
  if (version_ == NULL) {
    version_ = new ::message::VersionTg;
  }
  // @@protoc_insertion_point(field_mutable:message.LoginRequest.version)
  return version_;
}
 ::message::VersionTg* LoginRequest::release_version() {
  clear_has_version();
  ::message::VersionTg* temp = version_;
  version_ = NULL;
  return temp;
}
 void LoginRequest::set_allocated_version(::message::VersionTg* version) {
  delete version_;
  version_ = version;
  if (version) {
    set_has_version();
  } else {
    clear_has_version();
  }
  // @@protoc_insertion_point(field_set_allocated:message.LoginRequest.version)
}

// optional int32 channel = 4;
 bool LoginRequest::has_channel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void LoginRequest::set_has_channel() {
  _has_bits_[0] |= 0x00000008u;
}
 void LoginRequest::clear_has_channel() {
  _has_bits_[0] &= ~0x00000008u;
}
 void LoginRequest::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
 ::google::protobuf::int32 LoginRequest::channel() const {
  // @@protoc_insertion_point(field_get:message.LoginRequest.channel)
  return channel_;
}
 void LoginRequest::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:message.LoginRequest.channel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RegisterAccountRequest::kNameFieldNumber;
const int RegisterAccountRequest::kPwdFieldNumber;
#endif  // !_MSC_VER

RegisterAccountRequest::RegisterAccountRequest()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.RegisterAccountRequest)
}

void RegisterAccountRequest::InitAsDefaultInstance() {
}

RegisterAccountRequest::RegisterAccountRequest(const RegisterAccountRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.RegisterAccountRequest)
}

void RegisterAccountRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterAccountRequest::~RegisterAccountRequest() {
  // @@protoc_insertion_point(destructor:message.RegisterAccountRequest)
  SharedDtor();
}

void RegisterAccountRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RegisterAccountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterAccountRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterAccountRequest_descriptor_;
}

const RegisterAccountRequest& RegisterAccountRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

RegisterAccountRequest* RegisterAccountRequest::default_instance_ = NULL;

RegisterAccountRequest* RegisterAccountRequest::New(::google::protobuf::Arena* arena) const {
  RegisterAccountRequest* n = new RegisterAccountRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterAccountRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_pwd()) {
      pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RegisterAccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.RegisterAccountRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message.RegisterAccountRequest.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pwd;
        break;
      }

      // required string pwd = 2;
      case 2: {
        if (tag == 18) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message.RegisterAccountRequest.pwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.RegisterAccountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.RegisterAccountRequest)
  return false;
#undef DO_
}

void RegisterAccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.RegisterAccountRequest)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.RegisterAccountRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string pwd = 2;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.RegisterAccountRequest.pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pwd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.RegisterAccountRequest)
}

::google::protobuf::uint8* RegisterAccountRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.RegisterAccountRequest)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.RegisterAccountRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string pwd = 2;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.RegisterAccountRequest.pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pwd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.RegisterAccountRequest)
  return target;
}

int RegisterAccountRequest::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_pwd()) {
    // required string pwd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pwd());
  }

  return total_size;
}
int RegisterAccountRequest::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string pwd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pwd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterAccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RegisterAccountRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterAccountRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterAccountRequest::MergeFrom(const RegisterAccountRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_pwd()) {
      set_has_pwd();
      pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RegisterAccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterAccountRequest::CopyFrom(const RegisterAccountRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterAccountRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RegisterAccountRequest::Swap(RegisterAccountRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterAccountRequest::InternalSwap(RegisterAccountRequest* other) {
  name_.Swap(&other->name_);
  pwd_.Swap(&other->pwd_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterAccountRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterAccountRequest_descriptor_;
  metadata.reflection = RegisterAccountRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterAccountRequest

// required string name = 1;
 bool RegisterAccountRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void RegisterAccountRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
 void RegisterAccountRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
 void RegisterAccountRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& RegisterAccountRequest::name() const {
  // @@protoc_insertion_point(field_get:message.RegisterAccountRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterAccountRequest::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.RegisterAccountRequest.name)
}
 void RegisterAccountRequest::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.RegisterAccountRequest.name)
}
 void RegisterAccountRequest::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.RegisterAccountRequest.name)
}
 ::std::string* RegisterAccountRequest::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:message.RegisterAccountRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegisterAccountRequest::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterAccountRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:message.RegisterAccountRequest.name)
}

// required string pwd = 2;
 bool RegisterAccountRequest::has_pwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void RegisterAccountRequest::set_has_pwd() {
  _has_bits_[0] |= 0x00000002u;
}
 void RegisterAccountRequest::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000002u;
}
 void RegisterAccountRequest::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwd();
}
 const ::std::string& RegisterAccountRequest::pwd() const {
  // @@protoc_insertion_point(field_get:message.RegisterAccountRequest.pwd)
  return pwd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterAccountRequest::set_pwd(const ::std::string& value) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.RegisterAccountRequest.pwd)
}
 void RegisterAccountRequest::set_pwd(const char* value) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.RegisterAccountRequest.pwd)
}
 void RegisterAccountRequest::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.RegisterAccountRequest.pwd)
}
 ::std::string* RegisterAccountRequest::mutable_pwd() {
  set_has_pwd();
  // @@protoc_insertion_point(field_mutable:message.RegisterAccountRequest.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegisterAccountRequest::release_pwd() {
  clear_has_pwd();
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterAccountRequest::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    set_has_pwd();
  } else {
    clear_has_pwd();
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:message.RegisterAccountRequest.pwd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RegisterAccountFaildACK::RegisterAccountFaildACK()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.RegisterAccountFaildACK)
}

void RegisterAccountFaildACK::InitAsDefaultInstance() {
}

RegisterAccountFaildACK::RegisterAccountFaildACK(const RegisterAccountFaildACK& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.RegisterAccountFaildACK)
}

void RegisterAccountFaildACK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterAccountFaildACK::~RegisterAccountFaildACK() {
  // @@protoc_insertion_point(destructor:message.RegisterAccountFaildACK)
  SharedDtor();
}

void RegisterAccountFaildACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegisterAccountFaildACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterAccountFaildACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterAccountFaildACK_descriptor_;
}

const RegisterAccountFaildACK& RegisterAccountFaildACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

RegisterAccountFaildACK* RegisterAccountFaildACK::default_instance_ = NULL;

RegisterAccountFaildACK* RegisterAccountFaildACK::New(::google::protobuf::Arena* arena) const {
  RegisterAccountFaildACK* n = new RegisterAccountFaildACK;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterAccountFaildACK::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RegisterAccountFaildACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.RegisterAccountFaildACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:message.RegisterAccountFaildACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.RegisterAccountFaildACK)
  return false;
#undef DO_
}

void RegisterAccountFaildACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.RegisterAccountFaildACK)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.RegisterAccountFaildACK)
}

::google::protobuf::uint8* RegisterAccountFaildACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.RegisterAccountFaildACK)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.RegisterAccountFaildACK)
  return target;
}

int RegisterAccountFaildACK::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterAccountFaildACK::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RegisterAccountFaildACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterAccountFaildACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterAccountFaildACK::MergeFrom(const RegisterAccountFaildACK& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RegisterAccountFaildACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterAccountFaildACK::CopyFrom(const RegisterAccountFaildACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterAccountFaildACK::IsInitialized() const {

  return true;
}

void RegisterAccountFaildACK::Swap(RegisterAccountFaildACK* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterAccountFaildACK::InternalSwap(RegisterAccountFaildACK* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterAccountFaildACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterAccountFaildACK_descriptor_;
  metadata.reflection = RegisterAccountFaildACK_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterAccountFaildACK

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int LoginResponse::kGateIpFieldNumber;
const int LoginResponse::kGatePortFieldNumber;
const int LoginResponse::kUserAccountFieldNumber;
const int LoginResponse::kResultFieldNumber;
const int LoginResponse::kVersionFieldNumber;
#endif  // !_MSC_VER

LoginResponse::LoginResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.LoginResponse)
}

void LoginResponse::InitAsDefaultInstance() {
  version_ = const_cast< ::message::VersionTg*>(&::message::VersionTg::default_instance());
}

LoginResponse::LoginResponse(const LoginResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.LoginResponse)
}

void LoginResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gate_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gate_port_ = 0u;
  user_account_ = 0u;
  result_ = 0;
  version_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:message.LoginResponse)
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  gate_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete version_;
  }
}

void LoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResponse_descriptor_;
}

const LoginResponse& LoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

LoginResponse* LoginResponse::default_instance_ = NULL;

LoginResponse* LoginResponse::New(::google::protobuf::Arena* arena) const {
  LoginResponse* n = new LoginResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LoginResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(gate_port_, user_account_);
    if (has_gate_ip()) {
      gate_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    result_ = 0;
    if (has_version()) {
      if (version_ != NULL) version_->::message::VersionTg::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.LoginResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gate_ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gate_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gate_ip().data(), this->gate_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message.LoginResponse.gate_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gate_port;
        break;
      }

      // optional uint32 gate_port = 2;
      case 2: {
        if (tag == 16) {
         parse_gate_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gate_port_)));
          set_has_gate_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_user_account;
        break;
      }

      // optional uint32 user_account = 3;
      case 3: {
        if (tag == 24) {
         parse_user_account:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_account_)));
          set_has_user_account();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional .message.enumLoginResult result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::enumLoginResult_IsValid(value)) {
            set_result(static_cast< ::message::enumLoginResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_version;
        break;
      }

      // optional .message.VersionTg version = 5;
      case 5: {
        if (tag == 42) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.LoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.LoginResponse)
  return false;
#undef DO_
}

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.LoginResponse)
  // optional string gate_ip = 1;
  if (has_gate_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gate_ip().data(), this->gate_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.LoginResponse.gate_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gate_ip(), output);
  }

  // optional uint32 gate_port = 2;
  if (has_gate_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gate_port(), output);
  }

  // optional uint32 user_account = 3;
  if (has_user_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->user_account(), output);
  }

  // optional .message.enumLoginResult result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  // optional .message.VersionTg version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->version_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.LoginResponse)
}

::google::protobuf::uint8* LoginResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.LoginResponse)
  // optional string gate_ip = 1;
  if (has_gate_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gate_ip().data(), this->gate_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.LoginResponse.gate_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gate_ip(), target);
  }

  // optional uint32 gate_port = 2;
  if (has_gate_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gate_port(), target);
  }

  // optional uint32 user_account = 3;
  if (has_user_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->user_account(), target);
  }

  // optional .message.enumLoginResult result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  // optional .message.VersionTg version = 5;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->version_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.LoginResponse)
  return target;
}

int LoginResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31) {
    // optional string gate_ip = 1;
    if (has_gate_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gate_ip());
    }

    // optional uint32 gate_port = 2;
    if (has_gate_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gate_port());
    }

    // optional uint32 user_account = 3;
    if (has_user_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_account());
    }

    // optional .message.enumLoginResult result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .message.VersionTg version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->version_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LoginResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gate_ip()) {
      set_has_gate_ip();
      gate_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gate_ip_);
    }
    if (from.has_gate_port()) {
      set_gate_port(from.gate_port());
    }
    if (from.has_user_account()) {
      set_user_account(from.user_account());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_version()) {
      mutable_version()->::message::VersionTg::MergeFrom(from.version());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {

  if (has_version()) {
    if (!this->version_->IsInitialized()) return false;
  }
  return true;
}

void LoginResponse::Swap(LoginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginResponse::InternalSwap(LoginResponse* other) {
  gate_ip_.Swap(&other->gate_ip_);
  std::swap(gate_port_, other->gate_port_);
  std::swap(user_account_, other->user_account_);
  std::swap(result_, other->result_);
  std::swap(version_, other->version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResponse_descriptor_;
  metadata.reflection = LoginResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginResponse

// optional string gate_ip = 1;
 bool LoginResponse::has_gate_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void LoginResponse::set_has_gate_ip() {
  _has_bits_[0] |= 0x00000001u;
}
 void LoginResponse::clear_has_gate_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
 void LoginResponse::clear_gate_ip() {
  gate_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gate_ip();
}
 const ::std::string& LoginResponse::gate_ip() const {
  // @@protoc_insertion_point(field_get:message.LoginResponse.gate_ip)
  return gate_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginResponse::set_gate_ip(const ::std::string& value) {
  set_has_gate_ip();
  gate_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.LoginResponse.gate_ip)
}
 void LoginResponse::set_gate_ip(const char* value) {
  set_has_gate_ip();
  gate_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.LoginResponse.gate_ip)
}
 void LoginResponse::set_gate_ip(const char* value, size_t size) {
  set_has_gate_ip();
  gate_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.LoginResponse.gate_ip)
}
 ::std::string* LoginResponse::mutable_gate_ip() {
  set_has_gate_ip();
  // @@protoc_insertion_point(field_mutable:message.LoginResponse.gate_ip)
  return gate_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginResponse::release_gate_ip() {
  clear_has_gate_ip();
  return gate_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginResponse::set_allocated_gate_ip(::std::string* gate_ip) {
  if (gate_ip != NULL) {
    set_has_gate_ip();
  } else {
    clear_has_gate_ip();
  }
  gate_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gate_ip);
  // @@protoc_insertion_point(field_set_allocated:message.LoginResponse.gate_ip)
}

// optional uint32 gate_port = 2;
 bool LoginResponse::has_gate_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void LoginResponse::set_has_gate_port() {
  _has_bits_[0] |= 0x00000002u;
}
 void LoginResponse::clear_has_gate_port() {
  _has_bits_[0] &= ~0x00000002u;
}
 void LoginResponse::clear_gate_port() {
  gate_port_ = 0u;
  clear_has_gate_port();
}
 ::google::protobuf::uint32 LoginResponse::gate_port() const {
  // @@protoc_insertion_point(field_get:message.LoginResponse.gate_port)
  return gate_port_;
}
 void LoginResponse::set_gate_port(::google::protobuf::uint32 value) {
  set_has_gate_port();
  gate_port_ = value;
  // @@protoc_insertion_point(field_set:message.LoginResponse.gate_port)
}

// optional uint32 user_account = 3;
 bool LoginResponse::has_user_account() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void LoginResponse::set_has_user_account() {
  _has_bits_[0] |= 0x00000004u;
}
 void LoginResponse::clear_has_user_account() {
  _has_bits_[0] &= ~0x00000004u;
}
 void LoginResponse::clear_user_account() {
  user_account_ = 0u;
  clear_has_user_account();
}
 ::google::protobuf::uint32 LoginResponse::user_account() const {
  // @@protoc_insertion_point(field_get:message.LoginResponse.user_account)
  return user_account_;
}
 void LoginResponse::set_user_account(::google::protobuf::uint32 value) {
  set_has_user_account();
  user_account_ = value;
  // @@protoc_insertion_point(field_set:message.LoginResponse.user_account)
}

// optional .message.enumLoginResult result = 4;
 bool LoginResponse::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void LoginResponse::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
 void LoginResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
 void LoginResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::message::enumLoginResult LoginResponse::result() const {
  // @@protoc_insertion_point(field_get:message.LoginResponse.result)
  return static_cast< ::message::enumLoginResult >(result_);
}
 void LoginResponse::set_result(::message::enumLoginResult value) {
  assert(::message::enumLoginResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:message.LoginResponse.result)
}

// optional .message.VersionTg version = 5;
 bool LoginResponse::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void LoginResponse::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
 void LoginResponse::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
 void LoginResponse::clear_version() {
  if (version_ != NULL) version_->::message::VersionTg::Clear();
  clear_has_version();
}
 const ::message::VersionTg& LoginResponse::version() const {
  // @@protoc_insertion_point(field_get:message.LoginResponse.version)
  return version_ != NULL ? *version_ : *default_instance_->version_;
}
 ::message::VersionTg* LoginResponse::mutable_version() {
  set_has_version();
  if (version_ == NULL) {
    version_ = new ::message::VersionTg;
  }
  // @@protoc_insertion_point(field_mutable:message.LoginResponse.version)
  return version_;
}
 ::message::VersionTg* LoginResponse::release_version() {
  clear_has_version();
  ::message::VersionTg* temp = version_;
  version_ = NULL;
  return temp;
}
 void LoginResponse::set_allocated_version(::message::VersionTg* version) {
  delete version_;
  version_ = version;
  if (version) {
    set_has_version();
  } else {
    clear_has_version();
  }
  // @@protoc_insertion_point(field_set_allocated:message.LoginResponse.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int LoginGame::kUserAccountFieldNumber;
#endif  // !_MSC_VER

LoginGame::LoginGame()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.LoginGame)
}

void LoginGame::InitAsDefaultInstance() {
}

LoginGame::LoginGame(const LoginGame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.LoginGame)
}

void LoginGame::SharedCtor() {
  _cached_size_ = 0;
  user_account_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginGame::~LoginGame() {
  // @@protoc_insertion_point(destructor:message.LoginGame)
  SharedDtor();
}

void LoginGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginGame_descriptor_;
}

const LoginGame& LoginGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

LoginGame* LoginGame::default_instance_ = NULL;

LoginGame* LoginGame::New(::google::protobuf::Arena* arena) const {
  LoginGame* n = new LoginGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginGame::Clear() {
  user_account_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LoginGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.LoginGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_account = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_account_)));
          set_has_user_account();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.LoginGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.LoginGame)
  return false;
#undef DO_
}

void LoginGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.LoginGame)
  // required uint32 user_account = 1;
  if (has_user_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_account(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.LoginGame)
}

::google::protobuf::uint8* LoginGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.LoginGame)
  // required uint32 user_account = 1;
  if (has_user_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_account(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.LoginGame)
  return target;
}

int LoginGame::ByteSize() const {
  int total_size = 0;

  // required uint32 user_account = 1;
  if (has_user_account()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_account());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginGame::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LoginGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginGame::MergeFrom(const LoginGame& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_account()) {
      set_user_account(from.user_account());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LoginGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginGame::CopyFrom(const LoginGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginGame::Swap(LoginGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginGame::InternalSwap(LoginGame* other) {
  std::swap(user_account_, other->user_account_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginGame_descriptor_;
  metadata.reflection = LoginGame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginGame

// required uint32 user_account = 1;
 bool LoginGame::has_user_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void LoginGame::set_has_user_account() {
  _has_bits_[0] |= 0x00000001u;
}
 void LoginGame::clear_has_user_account() {
  _has_bits_[0] &= ~0x00000001u;
}
 void LoginGame::clear_user_account() {
  user_account_ = 0u;
  clear_has_user_account();
}
 ::google::protobuf::uint32 LoginGame::user_account() const {
  // @@protoc_insertion_point(field_get:message.LoginGame.user_account)
  return user_account_;
}
 void LoginGame::set_user_account(::google::protobuf::uint32 value) {
  set_has_user_account();
  user_account_ = value;
  // @@protoc_insertion_point(field_set:message.LoginGame.user_account)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ClientExit::kCharidFieldNumber;
const int ClientExit::kUserAccountFieldNumber;
#endif  // !_MSC_VER

ClientExit::ClientExit()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.ClientExit)
}

void ClientExit::InitAsDefaultInstance() {
}

ClientExit::ClientExit(const ClientExit& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.ClientExit)
}

void ClientExit::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  user_account_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientExit::~ClientExit() {
  // @@protoc_insertion_point(destructor:message.ClientExit)
  SharedDtor();
}

void ClientExit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientExit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientExit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientExit_descriptor_;
}

const ClientExit& ClientExit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

ClientExit* ClientExit::default_instance_ = NULL;

ClientExit* ClientExit::New(::google::protobuf::Arena* arena) const {
  ClientExit* n = new ClientExit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientExit::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ClientExit*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(user_account_, charid_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ClientExit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.ClientExit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_account;
        break;
      }

      // optional uint64 user_account = 2;
      case 2: {
        if (tag == 16) {
         parse_user_account:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_account_)));
          set_has_user_account();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.ClientExit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.ClientExit)
  return false;
#undef DO_
}

void ClientExit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.ClientExit)
  // optional uint32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint64 user_account = 2;
  if (has_user_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_account(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.ClientExit)
}

::google::protobuf::uint8* ClientExit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.ClientExit)
  // optional uint32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint64 user_account = 2;
  if (has_user_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_account(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.ClientExit)
  return target;
}

int ClientExit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint64 user_account = 2;
    if (has_user_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_account());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientExit::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClientExit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientExit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientExit::MergeFrom(const ClientExit& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_user_account()) {
      set_user_account(from.user_account());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ClientExit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientExit::CopyFrom(const ClientExit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientExit::IsInitialized() const {

  return true;
}

void ClientExit::Swap(ClientExit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientExit::InternalSwap(ClientExit* other) {
  std::swap(charid_, other->charid_);
  std::swap(user_account_, other->user_account_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientExit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientExit_descriptor_;
  metadata.reflection = ClientExit_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientExit

// optional uint32 charid = 1;
 bool ClientExit::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void ClientExit::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
 void ClientExit::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void ClientExit::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
 ::google::protobuf::uint32 ClientExit::charid() const {
  // @@protoc_insertion_point(field_get:message.ClientExit.charid)
  return charid_;
}
 void ClientExit::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:message.ClientExit.charid)
}

// optional uint64 user_account = 2;
 bool ClientExit::has_user_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void ClientExit::set_has_user_account() {
  _has_bits_[0] |= 0x00000002u;
}
 void ClientExit::clear_has_user_account() {
  _has_bits_[0] &= ~0x00000002u;
}
 void ClientExit::clear_user_account() {
  user_account_ = GOOGLE_ULONGLONG(0);
  clear_has_user_account();
}
 ::google::protobuf::uint64 ClientExit::user_account() const {
  // @@protoc_insertion_point(field_get:message.ClientExit.user_account)
  return user_account_;
}
 void ClientExit::set_user_account(::google::protobuf::uint64 value) {
  set_has_user_account();
  user_account_ = value;
  // @@protoc_insertion_point(field_set:message.ClientExit.user_account)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int C2SPlatformVerifyReq::kUserIdFieldNumber;
const int C2SPlatformVerifyReq::kAppIdFieldNumber;
const int C2SPlatformVerifyReq::kAppKeyFieldNumber;
const int C2SPlatformVerifyReq::kTokenIdFieldNumber;
const int C2SPlatformVerifyReq::kChannelIdFieldNumber;
const int C2SPlatformVerifyReq::kExtraDataFieldNumber;
#endif  // !_MSC_VER

C2SPlatformVerifyReq::C2SPlatformVerifyReq()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.C2SPlatformVerifyReq)
}

void C2SPlatformVerifyReq::InitAsDefaultInstance() {
}

C2SPlatformVerifyReq::C2SPlatformVerifyReq(const C2SPlatformVerifyReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.C2SPlatformVerifyReq)
}

void C2SPlatformVerifyReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_id_ = 0;
  extra_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2SPlatformVerifyReq::~C2SPlatformVerifyReq() {
  // @@protoc_insertion_point(destructor:message.C2SPlatformVerifyReq)
  SharedDtor();
}

void C2SPlatformVerifyReq::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void C2SPlatformVerifyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2SPlatformVerifyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2SPlatformVerifyReq_descriptor_;
}

const C2SPlatformVerifyReq& C2SPlatformVerifyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

C2SPlatformVerifyReq* C2SPlatformVerifyReq::default_instance_ = NULL;

C2SPlatformVerifyReq* C2SPlatformVerifyReq::New(::google::protobuf::Arena* arena) const {
  C2SPlatformVerifyReq* n = new C2SPlatformVerifyReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void C2SPlatformVerifyReq::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_app_id()) {
      app_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_app_key()) {
      app_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_token_id()) {
      token_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    channel_id_ = 0;
    if (has_extra_data()) {
      extra_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool C2SPlatformVerifyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.C2SPlatformVerifyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message.C2SPlatformVerifyReq.user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_app_id;
        break;
      }

      // required string app_id = 2;
      case 2: {
        if (tag == 18) {
         parse_app_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_id().data(), this->app_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message.C2SPlatformVerifyReq.app_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_app_key;
        break;
      }

      // required string app_key = 3;
      case 3: {
        if (tag == 26) {
         parse_app_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_key().data(), this->app_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message.C2SPlatformVerifyReq.app_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_token_id;
        break;
      }

      // required string token_id = 4;
      case 4: {
        if (tag == 34) {
         parse_token_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token_id().data(), this->token_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message.C2SPlatformVerifyReq.token_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channel_id;
        break;
      }

      // required int32 channel_id = 5;
      case 5: {
        if (tag == 40) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_extra_data;
        break;
      }

      // required string extra_data = 6;
      case 6: {
        if (tag == 50) {
         parse_extra_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extra_data().data(), this->extra_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message.C2SPlatformVerifyReq.extra_data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.C2SPlatformVerifyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.C2SPlatformVerifyReq)
  return false;
#undef DO_
}

void C2SPlatformVerifyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.C2SPlatformVerifyReq)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.C2SPlatformVerifyReq.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // required string app_id = 2;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.C2SPlatformVerifyReq.app_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->app_id(), output);
  }

  // required string app_key = 3;
  if (has_app_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_key().data(), this->app_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.C2SPlatformVerifyReq.app_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->app_key(), output);
  }

  // required string token_id = 4;
  if (has_token_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token_id().data(), this->token_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.C2SPlatformVerifyReq.token_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->token_id(), output);
  }

  // required int32 channel_id = 5;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->channel_id(), output);
  }

  // required string extra_data = 6;
  if (has_extra_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra_data().data(), this->extra_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.C2SPlatformVerifyReq.extra_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->extra_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.C2SPlatformVerifyReq)
}

::google::protobuf::uint8* C2SPlatformVerifyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.C2SPlatformVerifyReq)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.C2SPlatformVerifyReq.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // required string app_id = 2;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.C2SPlatformVerifyReq.app_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->app_id(), target);
  }

  // required string app_key = 3;
  if (has_app_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_key().data(), this->app_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.C2SPlatformVerifyReq.app_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->app_key(), target);
  }

  // required string token_id = 4;
  if (has_token_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token_id().data(), this->token_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.C2SPlatformVerifyReq.token_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token_id(), target);
  }

  // required int32 channel_id = 5;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->channel_id(), target);
  }

  // required string extra_data = 6;
  if (has_extra_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra_data().data(), this->extra_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.C2SPlatformVerifyReq.extra_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->extra_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.C2SPlatformVerifyReq)
  return target;
}

int C2SPlatformVerifyReq::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_user_id()) {
    // required string user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  if (has_app_id()) {
    // required string app_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->app_id());
  }

  if (has_app_key()) {
    // required string app_key = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->app_key());
  }

  if (has_token_id()) {
    // required string token_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token_id());
  }

  if (has_channel_id()) {
    // required int32 channel_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channel_id());
  }

  if (has_extra_data()) {
    // required string extra_data = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extra_data());
  }

  return total_size;
}
int C2SPlatformVerifyReq::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());

    // required string app_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->app_id());

    // required string app_key = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->app_key());

    // required string token_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token_id());

    // required int32 channel_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channel_id());

    // required string extra_data = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extra_data());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2SPlatformVerifyReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const C2SPlatformVerifyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2SPlatformVerifyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2SPlatformVerifyReq::MergeFrom(const C2SPlatformVerifyReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_app_id()) {
      set_has_app_id();
      app_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_id_);
    }
    if (from.has_app_key()) {
      set_has_app_key();
      app_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_key_);
    }
    if (from.has_token_id()) {
      set_has_token_id();
      token_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_id_);
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_extra_data()) {
      set_has_extra_data();
      extra_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void C2SPlatformVerifyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2SPlatformVerifyReq::CopyFrom(const C2SPlatformVerifyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2SPlatformVerifyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void C2SPlatformVerifyReq::Swap(C2SPlatformVerifyReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C2SPlatformVerifyReq::InternalSwap(C2SPlatformVerifyReq* other) {
  user_id_.Swap(&other->user_id_);
  app_id_.Swap(&other->app_id_);
  app_key_.Swap(&other->app_key_);
  token_id_.Swap(&other->token_id_);
  std::swap(channel_id_, other->channel_id_);
  extra_data_.Swap(&other->extra_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata C2SPlatformVerifyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2SPlatformVerifyReq_descriptor_;
  metadata.reflection = C2SPlatformVerifyReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// C2SPlatformVerifyReq

// required string user_id = 1;
 bool C2SPlatformVerifyReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void C2SPlatformVerifyReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
 void C2SPlatformVerifyReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
 void C2SPlatformVerifyReq::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
 const ::std::string& C2SPlatformVerifyReq::user_id() const {
  // @@protoc_insertion_point(field_get:message.C2SPlatformVerifyReq.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void C2SPlatformVerifyReq::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.C2SPlatformVerifyReq.user_id)
}
 void C2SPlatformVerifyReq::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.C2SPlatformVerifyReq.user_id)
}
 void C2SPlatformVerifyReq::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.C2SPlatformVerifyReq.user_id)
}
 ::std::string* C2SPlatformVerifyReq::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:message.C2SPlatformVerifyReq.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* C2SPlatformVerifyReq::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void C2SPlatformVerifyReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:message.C2SPlatformVerifyReq.user_id)
}

// required string app_id = 2;
 bool C2SPlatformVerifyReq::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void C2SPlatformVerifyReq::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
 void C2SPlatformVerifyReq::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
 void C2SPlatformVerifyReq::clear_app_id() {
  app_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app_id();
}
 const ::std::string& C2SPlatformVerifyReq::app_id() const {
  // @@protoc_insertion_point(field_get:message.C2SPlatformVerifyReq.app_id)
  return app_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void C2SPlatformVerifyReq::set_app_id(const ::std::string& value) {
  set_has_app_id();
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.C2SPlatformVerifyReq.app_id)
}
 void C2SPlatformVerifyReq::set_app_id(const char* value) {
  set_has_app_id();
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.C2SPlatformVerifyReq.app_id)
}
 void C2SPlatformVerifyReq::set_app_id(const char* value, size_t size) {
  set_has_app_id();
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.C2SPlatformVerifyReq.app_id)
}
 ::std::string* C2SPlatformVerifyReq::mutable_app_id() {
  set_has_app_id();
  // @@protoc_insertion_point(field_mutable:message.C2SPlatformVerifyReq.app_id)
  return app_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* C2SPlatformVerifyReq::release_app_id() {
  clear_has_app_id();
  return app_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void C2SPlatformVerifyReq::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    set_has_app_id();
  } else {
    clear_has_app_id();
  }
  app_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id);
  // @@protoc_insertion_point(field_set_allocated:message.C2SPlatformVerifyReq.app_id)
}

// required string app_key = 3;
 bool C2SPlatformVerifyReq::has_app_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void C2SPlatformVerifyReq::set_has_app_key() {
  _has_bits_[0] |= 0x00000004u;
}
 void C2SPlatformVerifyReq::clear_has_app_key() {
  _has_bits_[0] &= ~0x00000004u;
}
 void C2SPlatformVerifyReq::clear_app_key() {
  app_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app_key();
}
 const ::std::string& C2SPlatformVerifyReq::app_key() const {
  // @@protoc_insertion_point(field_get:message.C2SPlatformVerifyReq.app_key)
  return app_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void C2SPlatformVerifyReq::set_app_key(const ::std::string& value) {
  set_has_app_key();
  app_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.C2SPlatformVerifyReq.app_key)
}
 void C2SPlatformVerifyReq::set_app_key(const char* value) {
  set_has_app_key();
  app_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.C2SPlatformVerifyReq.app_key)
}
 void C2SPlatformVerifyReq::set_app_key(const char* value, size_t size) {
  set_has_app_key();
  app_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.C2SPlatformVerifyReq.app_key)
}
 ::std::string* C2SPlatformVerifyReq::mutable_app_key() {
  set_has_app_key();
  // @@protoc_insertion_point(field_mutable:message.C2SPlatformVerifyReq.app_key)
  return app_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* C2SPlatformVerifyReq::release_app_key() {
  clear_has_app_key();
  return app_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void C2SPlatformVerifyReq::set_allocated_app_key(::std::string* app_key) {
  if (app_key != NULL) {
    set_has_app_key();
  } else {
    clear_has_app_key();
  }
  app_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_key);
  // @@protoc_insertion_point(field_set_allocated:message.C2SPlatformVerifyReq.app_key)
}

// required string token_id = 4;
 bool C2SPlatformVerifyReq::has_token_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void C2SPlatformVerifyReq::set_has_token_id() {
  _has_bits_[0] |= 0x00000008u;
}
 void C2SPlatformVerifyReq::clear_has_token_id() {
  _has_bits_[0] &= ~0x00000008u;
}
 void C2SPlatformVerifyReq::clear_token_id() {
  token_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token_id();
}
 const ::std::string& C2SPlatformVerifyReq::token_id() const {
  // @@protoc_insertion_point(field_get:message.C2SPlatformVerifyReq.token_id)
  return token_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void C2SPlatformVerifyReq::set_token_id(const ::std::string& value) {
  set_has_token_id();
  token_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.C2SPlatformVerifyReq.token_id)
}
 void C2SPlatformVerifyReq::set_token_id(const char* value) {
  set_has_token_id();
  token_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.C2SPlatformVerifyReq.token_id)
}
 void C2SPlatformVerifyReq::set_token_id(const char* value, size_t size) {
  set_has_token_id();
  token_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.C2SPlatformVerifyReq.token_id)
}
 ::std::string* C2SPlatformVerifyReq::mutable_token_id() {
  set_has_token_id();
  // @@protoc_insertion_point(field_mutable:message.C2SPlatformVerifyReq.token_id)
  return token_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* C2SPlatformVerifyReq::release_token_id() {
  clear_has_token_id();
  return token_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void C2SPlatformVerifyReq::set_allocated_token_id(::std::string* token_id) {
  if (token_id != NULL) {
    set_has_token_id();
  } else {
    clear_has_token_id();
  }
  token_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token_id);
  // @@protoc_insertion_point(field_set_allocated:message.C2SPlatformVerifyReq.token_id)
}

// required int32 channel_id = 5;
 bool C2SPlatformVerifyReq::has_channel_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void C2SPlatformVerifyReq::set_has_channel_id() {
  _has_bits_[0] |= 0x00000010u;
}
 void C2SPlatformVerifyReq::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000010u;
}
 void C2SPlatformVerifyReq::clear_channel_id() {
  channel_id_ = 0;
  clear_has_channel_id();
}
 ::google::protobuf::int32 C2SPlatformVerifyReq::channel_id() const {
  // @@protoc_insertion_point(field_get:message.C2SPlatformVerifyReq.channel_id)
  return channel_id_;
}
 void C2SPlatformVerifyReq::set_channel_id(::google::protobuf::int32 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:message.C2SPlatformVerifyReq.channel_id)
}

// required string extra_data = 6;
 bool C2SPlatformVerifyReq::has_extra_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void C2SPlatformVerifyReq::set_has_extra_data() {
  _has_bits_[0] |= 0x00000020u;
}
 void C2SPlatformVerifyReq::clear_has_extra_data() {
  _has_bits_[0] &= ~0x00000020u;
}
 void C2SPlatformVerifyReq::clear_extra_data() {
  extra_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extra_data();
}
 const ::std::string& C2SPlatformVerifyReq::extra_data() const {
  // @@protoc_insertion_point(field_get:message.C2SPlatformVerifyReq.extra_data)
  return extra_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void C2SPlatformVerifyReq::set_extra_data(const ::std::string& value) {
  set_has_extra_data();
  extra_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.C2SPlatformVerifyReq.extra_data)
}
 void C2SPlatformVerifyReq::set_extra_data(const char* value) {
  set_has_extra_data();
  extra_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.C2SPlatformVerifyReq.extra_data)
}
 void C2SPlatformVerifyReq::set_extra_data(const char* value, size_t size) {
  set_has_extra_data();
  extra_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.C2SPlatformVerifyReq.extra_data)
}
 ::std::string* C2SPlatformVerifyReq::mutable_extra_data() {
  set_has_extra_data();
  // @@protoc_insertion_point(field_mutable:message.C2SPlatformVerifyReq.extra_data)
  return extra_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* C2SPlatformVerifyReq::release_extra_data() {
  clear_has_extra_data();
  return extra_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void C2SPlatformVerifyReq::set_allocated_extra_data(::std::string* extra_data) {
  if (extra_data != NULL) {
    set_has_extra_data();
  } else {
    clear_has_extra_data();
  }
  extra_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra_data);
  // @@protoc_insertion_point(field_set_allocated:message.C2SPlatformVerifyReq.extra_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int S2CPlatformVerifyACK::kUserIdFieldNumber;
const int S2CPlatformVerifyACK::kNickNameFieldNumber;
const int S2CPlatformVerifyACK::kTokenFieldNumber;
const int S2CPlatformVerifyACK::kSuccessFieldNumber;
#endif  // !_MSC_VER

S2CPlatformVerifyACK::S2CPlatformVerifyACK()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.S2CPlatformVerifyACK)
}

void S2CPlatformVerifyACK::InitAsDefaultInstance() {
}

S2CPlatformVerifyACK::S2CPlatformVerifyACK(const S2CPlatformVerifyACK& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.S2CPlatformVerifyACK)
}

void S2CPlatformVerifyACK::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2CPlatformVerifyACK::~S2CPlatformVerifyACK() {
  // @@protoc_insertion_point(destructor:message.S2CPlatformVerifyACK)
  SharedDtor();
}

void S2CPlatformVerifyACK::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void S2CPlatformVerifyACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2CPlatformVerifyACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2CPlatformVerifyACK_descriptor_;
}

const S2CPlatformVerifyACK& S2CPlatformVerifyACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

S2CPlatformVerifyACK* S2CPlatformVerifyACK::default_instance_ = NULL;

S2CPlatformVerifyACK* S2CPlatformVerifyACK::New(::google::protobuf::Arena* arena) const {
  S2CPlatformVerifyACK* n = new S2CPlatformVerifyACK;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2CPlatformVerifyACK::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_nick_name()) {
      nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_token()) {
      token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    success_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool S2CPlatformVerifyACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.S2CPlatformVerifyACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message.S2CPlatformVerifyACK.user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nick_name;
        break;
      }

      // required string nick_name = 2;
      case 2: {
        if (tag == 18) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message.S2CPlatformVerifyACK.nick_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // required string token = 3;
      case 3: {
        if (tag == 26) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message.S2CPlatformVerifyACK.token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_success;
        break;
      }

      // required bool success = 4;
      case 4: {
        if (tag == 32) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.S2CPlatformVerifyACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.S2CPlatformVerifyACK)
  return false;
#undef DO_
}

void S2CPlatformVerifyACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.S2CPlatformVerifyACK)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.S2CPlatformVerifyACK.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // required string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.S2CPlatformVerifyACK.nick_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nick_name(), output);
  }

  // required string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.S2CPlatformVerifyACK.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  // required bool success = 4;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.S2CPlatformVerifyACK)
}

::google::protobuf::uint8* S2CPlatformVerifyACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.S2CPlatformVerifyACK)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.S2CPlatformVerifyACK.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // required string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.S2CPlatformVerifyACK.nick_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick_name(), target);
  }

  // required string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.S2CPlatformVerifyACK.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // required bool success = 4;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.S2CPlatformVerifyACK)
  return target;
}

int S2CPlatformVerifyACK::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_user_id()) {
    // required string user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  if (has_nick_name()) {
    // required string nick_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nick_name());
  }

  if (has_token()) {
    // required string token = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  if (has_success()) {
    // required bool success = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
int S2CPlatformVerifyACK::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());

    // required string nick_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nick_name());

    // required string token = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());

    // required bool success = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2CPlatformVerifyACK::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const S2CPlatformVerifyACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2CPlatformVerifyACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2CPlatformVerifyACK::MergeFrom(const S2CPlatformVerifyACK& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_nick_name()) {
      set_has_nick_name();
      nick_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_name_);
    }
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void S2CPlatformVerifyACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2CPlatformVerifyACK::CopyFrom(const S2CPlatformVerifyACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2CPlatformVerifyACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2CPlatformVerifyACK::Swap(S2CPlatformVerifyACK* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2CPlatformVerifyACK::InternalSwap(S2CPlatformVerifyACK* other) {
  user_id_.Swap(&other->user_id_);
  nick_name_.Swap(&other->nick_name_);
  token_.Swap(&other->token_);
  std::swap(success_, other->success_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2CPlatformVerifyACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2CPlatformVerifyACK_descriptor_;
  metadata.reflection = S2CPlatformVerifyACK_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2CPlatformVerifyACK

// required string user_id = 1;
 bool S2CPlatformVerifyACK::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void S2CPlatformVerifyACK::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
 void S2CPlatformVerifyACK::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
 void S2CPlatformVerifyACK::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
 const ::std::string& S2CPlatformVerifyACK::user_id() const {
  // @@protoc_insertion_point(field_get:message.S2CPlatformVerifyACK.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void S2CPlatformVerifyACK::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.S2CPlatformVerifyACK.user_id)
}
 void S2CPlatformVerifyACK::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.S2CPlatformVerifyACK.user_id)
}
 void S2CPlatformVerifyACK::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.S2CPlatformVerifyACK.user_id)
}
 ::std::string* S2CPlatformVerifyACK::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:message.S2CPlatformVerifyACK.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* S2CPlatformVerifyACK::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void S2CPlatformVerifyACK::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:message.S2CPlatformVerifyACK.user_id)
}

// required string nick_name = 2;
 bool S2CPlatformVerifyACK::has_nick_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void S2CPlatformVerifyACK::set_has_nick_name() {
  _has_bits_[0] |= 0x00000002u;
}
 void S2CPlatformVerifyACK::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000002u;
}
 void S2CPlatformVerifyACK::clear_nick_name() {
  nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nick_name();
}
 const ::std::string& S2CPlatformVerifyACK::nick_name() const {
  // @@protoc_insertion_point(field_get:message.S2CPlatformVerifyACK.nick_name)
  return nick_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void S2CPlatformVerifyACK::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.S2CPlatformVerifyACK.nick_name)
}
 void S2CPlatformVerifyACK::set_nick_name(const char* value) {
  set_has_nick_name();
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.S2CPlatformVerifyACK.nick_name)
}
 void S2CPlatformVerifyACK::set_nick_name(const char* value, size_t size) {
  set_has_nick_name();
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.S2CPlatformVerifyACK.nick_name)
}
 ::std::string* S2CPlatformVerifyACK::mutable_nick_name() {
  set_has_nick_name();
  // @@protoc_insertion_point(field_mutable:message.S2CPlatformVerifyACK.nick_name)
  return nick_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* S2CPlatformVerifyACK::release_nick_name() {
  clear_has_nick_name();
  return nick_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void S2CPlatformVerifyACK::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name != NULL) {
    set_has_nick_name();
  } else {
    clear_has_nick_name();
  }
  nick_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick_name);
  // @@protoc_insertion_point(field_set_allocated:message.S2CPlatformVerifyACK.nick_name)
}

// required string token = 3;
 bool S2CPlatformVerifyACK::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void S2CPlatformVerifyACK::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
 void S2CPlatformVerifyACK::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
 void S2CPlatformVerifyACK::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
 const ::std::string& S2CPlatformVerifyACK::token() const {
  // @@protoc_insertion_point(field_get:message.S2CPlatformVerifyACK.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void S2CPlatformVerifyACK::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.S2CPlatformVerifyACK.token)
}
 void S2CPlatformVerifyACK::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.S2CPlatformVerifyACK.token)
}
 void S2CPlatformVerifyACK::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.S2CPlatformVerifyACK.token)
}
 ::std::string* S2CPlatformVerifyACK::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:message.S2CPlatformVerifyACK.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* S2CPlatformVerifyACK::release_token() {
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void S2CPlatformVerifyACK::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:message.S2CPlatformVerifyACK.token)
}

// required bool success = 4;
 bool S2CPlatformVerifyACK::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void S2CPlatformVerifyACK::set_has_success() {
  _has_bits_[0] |= 0x00000008u;
}
 void S2CPlatformVerifyACK::clear_has_success() {
  _has_bits_[0] &= ~0x00000008u;
}
 void S2CPlatformVerifyACK::clear_success() {
  success_ = false;
  clear_has_success();
}
 bool S2CPlatformVerifyACK::success() const {
  // @@protoc_insertion_point(field_get:message.S2CPlatformVerifyACK.success)
  return success_;
}
 void S2CPlatformVerifyACK::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:message.S2CPlatformVerifyACK.success)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MsgS2CPingNotify::kTimeFieldNumber;
const int MsgS2CPingNotify::kPingCountFieldNumber;
#endif  // !_MSC_VER

MsgS2CPingNotify::MsgS2CPingNotify()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.MsgS2CPingNotify)
}

void MsgS2CPingNotify::InitAsDefaultInstance() {
}

MsgS2CPingNotify::MsgS2CPingNotify(const MsgS2CPingNotify& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.MsgS2CPingNotify)
}

void MsgS2CPingNotify::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0;
  ping_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgS2CPingNotify::~MsgS2CPingNotify() {
  // @@protoc_insertion_point(destructor:message.MsgS2CPingNotify)
  SharedDtor();
}

void MsgS2CPingNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgS2CPingNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgS2CPingNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgS2CPingNotify_descriptor_;
}

const MsgS2CPingNotify& MsgS2CPingNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

MsgS2CPingNotify* MsgS2CPingNotify::default_instance_ = NULL;

MsgS2CPingNotify* MsgS2CPingNotify::New(::google::protobuf::Arena* arena) const {
  MsgS2CPingNotify* n = new MsgS2CPingNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgS2CPingNotify::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgS2CPingNotify*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_, ping_count_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgS2CPingNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.MsgS2CPingNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ping_count;
        break;
      }

      // required int32 ping_count = 2;
      case 2: {
        if (tag == 16) {
         parse_ping_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ping_count_)));
          set_has_ping_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.MsgS2CPingNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.MsgS2CPingNotify)
  return false;
#undef DO_
}

void MsgS2CPingNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.MsgS2CPingNotify)
  // required int32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time(), output);
  }

  // required int32 ping_count = 2;
  if (has_ping_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ping_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.MsgS2CPingNotify)
}

::google::protobuf::uint8* MsgS2CPingNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MsgS2CPingNotify)
  // required int32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time(), target);
  }

  // required int32 ping_count = 2;
  if (has_ping_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ping_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MsgS2CPingNotify)
  return target;
}

int MsgS2CPingNotify::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_time()) {
    // required int32 time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  if (has_ping_count()) {
    // required int32 ping_count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ping_count());
  }

  return total_size;
}
int MsgS2CPingNotify::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());

    // required int32 ping_count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ping_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgS2CPingNotify::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgS2CPingNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgS2CPingNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgS2CPingNotify::MergeFrom(const MsgS2CPingNotify& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_ping_count()) {
      set_ping_count(from.ping_count());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgS2CPingNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgS2CPingNotify::CopyFrom(const MsgS2CPingNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgS2CPingNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgS2CPingNotify::Swap(MsgS2CPingNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgS2CPingNotify::InternalSwap(MsgS2CPingNotify* other) {
  std::swap(time_, other->time_);
  std::swap(ping_count_, other->ping_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgS2CPingNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgS2CPingNotify_descriptor_;
  metadata.reflection = MsgS2CPingNotify_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgS2CPingNotify

// required int32 time = 1;
 bool MsgS2CPingNotify::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void MsgS2CPingNotify::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
 void MsgS2CPingNotify::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
 void MsgS2CPingNotify::clear_time() {
  time_ = 0;
  clear_has_time();
}
 ::google::protobuf::int32 MsgS2CPingNotify::time() const {
  // @@protoc_insertion_point(field_get:message.MsgS2CPingNotify.time)
  return time_;
}
 void MsgS2CPingNotify::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:message.MsgS2CPingNotify.time)
}

// required int32 ping_count = 2;
 bool MsgS2CPingNotify::has_ping_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void MsgS2CPingNotify::set_has_ping_count() {
  _has_bits_[0] |= 0x00000002u;
}
 void MsgS2CPingNotify::clear_has_ping_count() {
  _has_bits_[0] &= ~0x00000002u;
}
 void MsgS2CPingNotify::clear_ping_count() {
  ping_count_ = 0;
  clear_has_ping_count();
}
 ::google::protobuf::int32 MsgS2CPingNotify::ping_count() const {
  // @@protoc_insertion_point(field_get:message.MsgS2CPingNotify.ping_count)
  return ping_count_;
}
 void MsgS2CPingNotify::set_ping_count(::google::protobuf::int32 value) {
  set_has_ping_count();
  ping_count_ = value;
  // @@protoc_insertion_point(field_set:message.MsgS2CPingNotify.ping_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgC2SPingNotify::MsgC2SPingNotify()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.MsgC2SPingNotify)
}

void MsgC2SPingNotify::InitAsDefaultInstance() {
}

MsgC2SPingNotify::MsgC2SPingNotify(const MsgC2SPingNotify& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.MsgC2SPingNotify)
}

void MsgC2SPingNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgC2SPingNotify::~MsgC2SPingNotify() {
  // @@protoc_insertion_point(destructor:message.MsgC2SPingNotify)
  SharedDtor();
}

void MsgC2SPingNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgC2SPingNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgC2SPingNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgC2SPingNotify_descriptor_;
}

const MsgC2SPingNotify& MsgC2SPingNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

MsgC2SPingNotify* MsgC2SPingNotify::default_instance_ = NULL;

MsgC2SPingNotify* MsgC2SPingNotify::New(::google::protobuf::Arena* arena) const {
  MsgC2SPingNotify* n = new MsgC2SPingNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgC2SPingNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgC2SPingNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.MsgC2SPingNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:message.MsgC2SPingNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.MsgC2SPingNotify)
  return false;
#undef DO_
}

void MsgC2SPingNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.MsgC2SPingNotify)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.MsgC2SPingNotify)
}

::google::protobuf::uint8* MsgC2SPingNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MsgC2SPingNotify)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MsgC2SPingNotify)
  return target;
}

int MsgC2SPingNotify::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgC2SPingNotify::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgC2SPingNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgC2SPingNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgC2SPingNotify::MergeFrom(const MsgC2SPingNotify& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgC2SPingNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgC2SPingNotify::CopyFrom(const MsgC2SPingNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgC2SPingNotify::IsInitialized() const {

  return true;
}

void MsgC2SPingNotify::Swap(MsgC2SPingNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgC2SPingNotify::InternalSwap(MsgC2SPingNotify* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgC2SPingNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgC2SPingNotify_descriptor_;
  metadata.reflection = MsgC2SPingNotify_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgC2SPingNotify

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
