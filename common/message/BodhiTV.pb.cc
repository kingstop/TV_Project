// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BodhiTV.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BodhiTV.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace message {

namespace {

const ::google::protobuf::Descriptor* MsgC2SReqMovieThemes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgC2SReqMovieThemes_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgS2CMovieThemesACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgS2CMovieThemesACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgS2CClientInit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgS2CClientInit_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgC2SReqThemeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgC2SReqThemeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgS2CMovieThemeInfoACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgS2CMovieThemeInfoACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgC2SReqMovieInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgC2SReqMovieInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgS2CMovieInfoACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgS2CMovieInfoACK_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BodhiTV_2eproto() {
  protobuf_AddDesc_BodhiTV_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BodhiTV.proto");
  GOOGLE_CHECK(file != NULL);
  MsgC2SReqMovieThemes_descriptor_ = file->message_type(0);
  static const int MsgC2SReqMovieThemes_offsets_[1] = {
  };
  MsgC2SReqMovieThemes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgC2SReqMovieThemes_descriptor_,
      MsgC2SReqMovieThemes::default_instance_,
      MsgC2SReqMovieThemes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SReqMovieThemes, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgC2SReqMovieThemes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SReqMovieThemes, _internal_metadata_),
      -1);
  MsgS2CMovieThemesACK_descriptor_ = file->message_type(1);
  static const int MsgS2CMovieThemesACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CMovieThemesACK, infos_),
  };
  MsgS2CMovieThemesACK_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgS2CMovieThemesACK_descriptor_,
      MsgS2CMovieThemesACK::default_instance_,
      MsgS2CMovieThemesACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CMovieThemesACK, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgS2CMovieThemesACK),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CMovieThemesACK, _internal_metadata_),
      -1);
  MsgS2CClientInit_descriptor_ = file->message_type(2);
  static const int MsgS2CClientInit_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CClientInit, watch_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CClientInit, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CClientInit, resource_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CClientInit, config_pic_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CClientInit, config_video_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CClientInit, gird_theme_),
  };
  MsgS2CClientInit_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgS2CClientInit_descriptor_,
      MsgS2CClientInit::default_instance_,
      MsgS2CClientInit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CClientInit, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgS2CClientInit),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CClientInit, _internal_metadata_),
      -1);
  MsgC2SReqThemeInfo_descriptor_ = file->message_type(3);
  static const int MsgC2SReqThemeInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SReqThemeInfo, theme_id_),
  };
  MsgC2SReqThemeInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgC2SReqThemeInfo_descriptor_,
      MsgC2SReqThemeInfo::default_instance_,
      MsgC2SReqThemeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SReqThemeInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgC2SReqThemeInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SReqThemeInfo, _internal_metadata_),
      -1);
  MsgS2CMovieThemeInfoACK_descriptor_ = file->message_type(4);
  static const int MsgS2CMovieThemeInfoACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CMovieThemeInfoACK, info_),
  };
  MsgS2CMovieThemeInfoACK_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgS2CMovieThemeInfoACK_descriptor_,
      MsgS2CMovieThemeInfoACK::default_instance_,
      MsgS2CMovieThemeInfoACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CMovieThemeInfoACK, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgS2CMovieThemeInfoACK),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CMovieThemeInfoACK, _internal_metadata_),
      -1);
  MsgC2SReqMovieInfo_descriptor_ = file->message_type(5);
  static const int MsgC2SReqMovieInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SReqMovieInfo, movie_id_),
  };
  MsgC2SReqMovieInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgC2SReqMovieInfo_descriptor_,
      MsgC2SReqMovieInfo::default_instance_,
      MsgC2SReqMovieInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SReqMovieInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgC2SReqMovieInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SReqMovieInfo, _internal_metadata_),
      -1);
  MsgS2CMovieInfoACK_descriptor_ = file->message_type(6);
  static const int MsgS2CMovieInfoACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CMovieInfoACK, info_),
  };
  MsgS2CMovieInfoACK_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgS2CMovieInfoACK_descriptor_,
      MsgS2CMovieInfoACK::default_instance_,
      MsgS2CMovieInfoACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CMovieInfoACK, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgS2CMovieInfoACK),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CMovieInfoACK, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BodhiTV_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgC2SReqMovieThemes_descriptor_, &MsgC2SReqMovieThemes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgS2CMovieThemesACK_descriptor_, &MsgS2CMovieThemesACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgS2CClientInit_descriptor_, &MsgS2CClientInit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgC2SReqThemeInfo_descriptor_, &MsgC2SReqThemeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgS2CMovieThemeInfoACK_descriptor_, &MsgS2CMovieThemeInfoACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgC2SReqMovieInfo_descriptor_, &MsgC2SReqMovieInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgS2CMovieInfoACK_descriptor_, &MsgS2CMovieInfoACK::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BodhiTV_2eproto() {
  delete MsgC2SReqMovieThemes::default_instance_;
  delete MsgC2SReqMovieThemes_reflection_;
  delete MsgS2CMovieThemesACK::default_instance_;
  delete MsgS2CMovieThemesACK_reflection_;
  delete MsgS2CClientInit::default_instance_;
  delete MsgS2CClientInit_reflection_;
  delete MsgC2SReqThemeInfo::default_instance_;
  delete MsgC2SReqThemeInfo_reflection_;
  delete MsgS2CMovieThemeInfoACK::default_instance_;
  delete MsgS2CMovieThemeInfoACK_reflection_;
  delete MsgC2SReqMovieInfo::default_instance_;
  delete MsgC2SReqMovieInfo_reflection_;
  delete MsgS2CMovieInfoACK::default_instance_;
  delete MsgS2CMovieInfoACK_reflection_;
}

void protobuf_AddDesc_BodhiTV_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::message::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rBodhiTV.proto\022\007message\032\014common.proto\"\026"
    "\n\024MsgC2SReqMovieThemes\"E\n\024MsgS2CMovieThe"
    "mesACK\022-\n\005infos\030\001 \003(\0132\036.message.MsgMovie"
    "ThemeExternal\"\306\001\n\020MsgS2CClientInit\0221\n\014wa"
    "tch_record\030\001 \003(\0132\033.message.MsgWatchRecor"
    "dInfo\022\013\n\003vip\030\002 \002(\005\022\025\n\rresource_path\030\003 \002("
    "\t\022\027\n\017config_pic_path\030\004 \002(\t\022\031\n\021config_vid"
    "eo_path\030\005 \002(\t\022\'\n\ngird_theme\030\006 \003(\0132\023.mess"
    "age.MsgIntPair\"&\n\022MsgC2SReqThemeInfo\022\020\n\010"
    "Theme_id\030\001 \002(\005\"\?\n\027MsgS2CMovieThemeInfoAC"
    "K\022$\n\004info\030\001 \002(\0132\026.message.MsgMovieTheme\""
    "&\n\022MsgC2SReqMovieInfo\022\020\n\010movie_id\030\001 \002(\005\""
    "5\n\022MsgS2CMovieInfoACK\022\037\n\004info\030\001 \002(\0132\021.me"
    "ssage.MsgMovie", 534);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BodhiTV.proto", &protobuf_RegisterTypes);
  MsgC2SReqMovieThemes::default_instance_ = new MsgC2SReqMovieThemes();
  MsgS2CMovieThemesACK::default_instance_ = new MsgS2CMovieThemesACK();
  MsgS2CClientInit::default_instance_ = new MsgS2CClientInit();
  MsgC2SReqThemeInfo::default_instance_ = new MsgC2SReqThemeInfo();
  MsgS2CMovieThemeInfoACK::default_instance_ = new MsgS2CMovieThemeInfoACK();
  MsgC2SReqMovieInfo::default_instance_ = new MsgC2SReqMovieInfo();
  MsgS2CMovieInfoACK::default_instance_ = new MsgS2CMovieInfoACK();
  MsgC2SReqMovieThemes::default_instance_->InitAsDefaultInstance();
  MsgS2CMovieThemesACK::default_instance_->InitAsDefaultInstance();
  MsgS2CClientInit::default_instance_->InitAsDefaultInstance();
  MsgC2SReqThemeInfo::default_instance_->InitAsDefaultInstance();
  MsgS2CMovieThemeInfoACK::default_instance_->InitAsDefaultInstance();
  MsgC2SReqMovieInfo::default_instance_->InitAsDefaultInstance();
  MsgS2CMovieInfoACK::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BodhiTV_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BodhiTV_2eproto {
  StaticDescriptorInitializer_BodhiTV_2eproto() {
    protobuf_AddDesc_BodhiTV_2eproto();
  }
} static_descriptor_initializer_BodhiTV_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgC2SReqMovieThemes::MsgC2SReqMovieThemes()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.MsgC2SReqMovieThemes)
}

void MsgC2SReqMovieThemes::InitAsDefaultInstance() {
}

MsgC2SReqMovieThemes::MsgC2SReqMovieThemes(const MsgC2SReqMovieThemes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.MsgC2SReqMovieThemes)
}

void MsgC2SReqMovieThemes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgC2SReqMovieThemes::~MsgC2SReqMovieThemes() {
  // @@protoc_insertion_point(destructor:message.MsgC2SReqMovieThemes)
  SharedDtor();
}

void MsgC2SReqMovieThemes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgC2SReqMovieThemes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgC2SReqMovieThemes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgC2SReqMovieThemes_descriptor_;
}

const MsgC2SReqMovieThemes& MsgC2SReqMovieThemes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BodhiTV_2eproto();
  return *default_instance_;
}

MsgC2SReqMovieThemes* MsgC2SReqMovieThemes::default_instance_ = NULL;

MsgC2SReqMovieThemes* MsgC2SReqMovieThemes::New(::google::protobuf::Arena* arena) const {
  MsgC2SReqMovieThemes* n = new MsgC2SReqMovieThemes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgC2SReqMovieThemes::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgC2SReqMovieThemes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.MsgC2SReqMovieThemes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:message.MsgC2SReqMovieThemes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.MsgC2SReqMovieThemes)
  return false;
#undef DO_
}

void MsgC2SReqMovieThemes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.MsgC2SReqMovieThemes)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.MsgC2SReqMovieThemes)
}

::google::protobuf::uint8* MsgC2SReqMovieThemes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MsgC2SReqMovieThemes)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MsgC2SReqMovieThemes)
  return target;
}

int MsgC2SReqMovieThemes::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgC2SReqMovieThemes::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgC2SReqMovieThemes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgC2SReqMovieThemes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgC2SReqMovieThemes::MergeFrom(const MsgC2SReqMovieThemes& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgC2SReqMovieThemes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgC2SReqMovieThemes::CopyFrom(const MsgC2SReqMovieThemes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgC2SReqMovieThemes::IsInitialized() const {

  return true;
}

void MsgC2SReqMovieThemes::Swap(MsgC2SReqMovieThemes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgC2SReqMovieThemes::InternalSwap(MsgC2SReqMovieThemes* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgC2SReqMovieThemes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgC2SReqMovieThemes_descriptor_;
  metadata.reflection = MsgC2SReqMovieThemes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgC2SReqMovieThemes

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MsgS2CMovieThemesACK::kInfosFieldNumber;
#endif  // !_MSC_VER

MsgS2CMovieThemesACK::MsgS2CMovieThemesACK()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.MsgS2CMovieThemesACK)
}

void MsgS2CMovieThemesACK::InitAsDefaultInstance() {
}

MsgS2CMovieThemesACK::MsgS2CMovieThemesACK(const MsgS2CMovieThemesACK& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.MsgS2CMovieThemesACK)
}

void MsgS2CMovieThemesACK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgS2CMovieThemesACK::~MsgS2CMovieThemesACK() {
  // @@protoc_insertion_point(destructor:message.MsgS2CMovieThemesACK)
  SharedDtor();
}

void MsgS2CMovieThemesACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgS2CMovieThemesACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgS2CMovieThemesACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgS2CMovieThemesACK_descriptor_;
}

const MsgS2CMovieThemesACK& MsgS2CMovieThemesACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BodhiTV_2eproto();
  return *default_instance_;
}

MsgS2CMovieThemesACK* MsgS2CMovieThemesACK::default_instance_ = NULL;

MsgS2CMovieThemesACK* MsgS2CMovieThemesACK::New(::google::protobuf::Arena* arena) const {
  MsgS2CMovieThemesACK* n = new MsgS2CMovieThemesACK;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgS2CMovieThemesACK::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgS2CMovieThemesACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.MsgS2CMovieThemesACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .message.MsgMovieThemeExternal infos = 1;
      case 1: {
        if (tag == 10) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.MsgS2CMovieThemesACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.MsgS2CMovieThemesACK)
  return false;
#undef DO_
}

void MsgS2CMovieThemesACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.MsgS2CMovieThemesACK)
  // repeated .message.MsgMovieThemeExternal infos = 1;
  for (unsigned int i = 0, n = this->infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.MsgS2CMovieThemesACK)
}

::google::protobuf::uint8* MsgS2CMovieThemesACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MsgS2CMovieThemesACK)
  // repeated .message.MsgMovieThemeExternal infos = 1;
  for (unsigned int i = 0, n = this->infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MsgS2CMovieThemesACK)
  return target;
}

int MsgS2CMovieThemesACK::ByteSize() const {
  int total_size = 0;

  // repeated .message.MsgMovieThemeExternal infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgS2CMovieThemesACK::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgS2CMovieThemesACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgS2CMovieThemesACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgS2CMovieThemesACK::MergeFrom(const MsgS2CMovieThemesACK& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  infos_.MergeFrom(from.infos_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgS2CMovieThemesACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgS2CMovieThemesACK::CopyFrom(const MsgS2CMovieThemesACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgS2CMovieThemesACK::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->infos())) return false;
  return true;
}

void MsgS2CMovieThemesACK::Swap(MsgS2CMovieThemesACK* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgS2CMovieThemesACK::InternalSwap(MsgS2CMovieThemesACK* other) {
  infos_.UnsafeArenaSwap(&other->infos_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgS2CMovieThemesACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgS2CMovieThemesACK_descriptor_;
  metadata.reflection = MsgS2CMovieThemesACK_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgS2CMovieThemesACK

// repeated .message.MsgMovieThemeExternal infos = 1;
 int MsgS2CMovieThemesACK::infos_size() const {
  return infos_.size();
}
 void MsgS2CMovieThemesACK::clear_infos() {
  infos_.Clear();
}
 const ::message::MsgMovieThemeExternal& MsgS2CMovieThemesACK::infos(int index) const {
  // @@protoc_insertion_point(field_get:message.MsgS2CMovieThemesACK.infos)
  return infos_.Get(index);
}
 ::message::MsgMovieThemeExternal* MsgS2CMovieThemesACK::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:message.MsgS2CMovieThemesACK.infos)
  return infos_.Mutable(index);
}
 ::message::MsgMovieThemeExternal* MsgS2CMovieThemesACK::add_infos() {
  // @@protoc_insertion_point(field_add:message.MsgS2CMovieThemesACK.infos)
  return infos_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::message::MsgMovieThemeExternal >&
MsgS2CMovieThemesACK::infos() const {
  // @@protoc_insertion_point(field_list:message.MsgS2CMovieThemesACK.infos)
  return infos_;
}
 ::google::protobuf::RepeatedPtrField< ::message::MsgMovieThemeExternal >*
MsgS2CMovieThemesACK::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:message.MsgS2CMovieThemesACK.infos)
  return &infos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MsgS2CClientInit::kWatchRecordFieldNumber;
const int MsgS2CClientInit::kVipFieldNumber;
const int MsgS2CClientInit::kResourcePathFieldNumber;
const int MsgS2CClientInit::kConfigPicPathFieldNumber;
const int MsgS2CClientInit::kConfigVideoPathFieldNumber;
const int MsgS2CClientInit::kGirdThemeFieldNumber;
#endif  // !_MSC_VER

MsgS2CClientInit::MsgS2CClientInit()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.MsgS2CClientInit)
}

void MsgS2CClientInit::InitAsDefaultInstance() {
}

MsgS2CClientInit::MsgS2CClientInit(const MsgS2CClientInit& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.MsgS2CClientInit)
}

void MsgS2CClientInit::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  vip_ = 0;
  resource_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_pic_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_video_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgS2CClientInit::~MsgS2CClientInit() {
  // @@protoc_insertion_point(destructor:message.MsgS2CClientInit)
  SharedDtor();
}

void MsgS2CClientInit::SharedDtor() {
  resource_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_pic_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_video_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MsgS2CClientInit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgS2CClientInit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgS2CClientInit_descriptor_;
}

const MsgS2CClientInit& MsgS2CClientInit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BodhiTV_2eproto();
  return *default_instance_;
}

MsgS2CClientInit* MsgS2CClientInit::default_instance_ = NULL;

MsgS2CClientInit* MsgS2CClientInit::New(::google::protobuf::Arena* arena) const {
  MsgS2CClientInit* n = new MsgS2CClientInit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgS2CClientInit::Clear() {
  if (_has_bits_[0 / 32] & 30) {
    vip_ = 0;
    if (has_resource_path()) {
      resource_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_config_pic_path()) {
      config_pic_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_config_video_path()) {
      config_video_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  watch_record_.Clear();
  gird_theme_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgS2CClientInit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.MsgS2CClientInit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .message.MsgWatchRecordInfo watch_record = 1;
      case 1: {
        if (tag == 10) {
         parse_watch_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_watch_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_watch_record;
        if (input->ExpectTag(16)) goto parse_vip;
        break;
      }

      // required int32 vip = 2;
      case 2: {
        if (tag == 16) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_resource_path;
        break;
      }

      // required string resource_path = 3;
      case 3: {
        if (tag == 26) {
         parse_resource_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resource_path().data(), this->resource_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message.MsgS2CClientInit.resource_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_config_pic_path;
        break;
      }

      // required string config_pic_path = 4;
      case 4: {
        if (tag == 34) {
         parse_config_pic_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config_pic_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->config_pic_path().data(), this->config_pic_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message.MsgS2CClientInit.config_pic_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_config_video_path;
        break;
      }

      // required string config_video_path = 5;
      case 5: {
        if (tag == 42) {
         parse_config_video_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config_video_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->config_video_path().data(), this->config_video_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message.MsgS2CClientInit.config_video_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_gird_theme;
        break;
      }

      // repeated .message.MsgIntPair gird_theme = 6;
      case 6: {
        if (tag == 50) {
         parse_gird_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gird_theme()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_gird_theme;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.MsgS2CClientInit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.MsgS2CClientInit)
  return false;
#undef DO_
}

void MsgS2CClientInit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.MsgS2CClientInit)
  // repeated .message.MsgWatchRecordInfo watch_record = 1;
  for (unsigned int i = 0, n = this->watch_record_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->watch_record(i), output);
  }

  // required int32 vip = 2;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vip(), output);
  }

  // required string resource_path = 3;
  if (has_resource_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resource_path().data(), this->resource_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.MsgS2CClientInit.resource_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->resource_path(), output);
  }

  // required string config_pic_path = 4;
  if (has_config_pic_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config_pic_path().data(), this->config_pic_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.MsgS2CClientInit.config_pic_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->config_pic_path(), output);
  }

  // required string config_video_path = 5;
  if (has_config_video_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config_video_path().data(), this->config_video_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.MsgS2CClientInit.config_video_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->config_video_path(), output);
  }

  // repeated .message.MsgIntPair gird_theme = 6;
  for (unsigned int i = 0, n = this->gird_theme_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->gird_theme(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.MsgS2CClientInit)
}

::google::protobuf::uint8* MsgS2CClientInit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MsgS2CClientInit)
  // repeated .message.MsgWatchRecordInfo watch_record = 1;
  for (unsigned int i = 0, n = this->watch_record_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->watch_record(i), target);
  }

  // required int32 vip = 2;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vip(), target);
  }

  // required string resource_path = 3;
  if (has_resource_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resource_path().data(), this->resource_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.MsgS2CClientInit.resource_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->resource_path(), target);
  }

  // required string config_pic_path = 4;
  if (has_config_pic_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config_pic_path().data(), this->config_pic_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.MsgS2CClientInit.config_pic_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->config_pic_path(), target);
  }

  // required string config_video_path = 5;
  if (has_config_video_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config_video_path().data(), this->config_video_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.MsgS2CClientInit.config_video_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->config_video_path(), target);
  }

  // repeated .message.MsgIntPair gird_theme = 6;
  for (unsigned int i = 0, n = this->gird_theme_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->gird_theme(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MsgS2CClientInit)
  return target;
}

int MsgS2CClientInit::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_vip()) {
    // required int32 vip = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vip());
  }

  if (has_resource_path()) {
    // required string resource_path = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resource_path());
  }

  if (has_config_pic_path()) {
    // required string config_pic_path = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->config_pic_path());
  }

  if (has_config_video_path()) {
    // required string config_video_path = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->config_video_path());
  }

  return total_size;
}
int MsgS2CClientInit::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001e) ^ 0x0000001e) == 0) {  // All required fields are present.
    // required int32 vip = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vip());

    // required string resource_path = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resource_path());

    // required string config_pic_path = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->config_pic_path());

    // required string config_video_path = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->config_video_path());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .message.MsgWatchRecordInfo watch_record = 1;
  total_size += 1 * this->watch_record_size();
  for (int i = 0; i < this->watch_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->watch_record(i));
  }

  // repeated .message.MsgIntPair gird_theme = 6;
  total_size += 1 * this->gird_theme_size();
  for (int i = 0; i < this->gird_theme_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gird_theme(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgS2CClientInit::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgS2CClientInit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgS2CClientInit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgS2CClientInit::MergeFrom(const MsgS2CClientInit& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  watch_record_.MergeFrom(from.watch_record_);
  gird_theme_.MergeFrom(from.gird_theme_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_resource_path()) {
      set_has_resource_path();
      resource_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resource_path_);
    }
    if (from.has_config_pic_path()) {
      set_has_config_pic_path();
      config_pic_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_pic_path_);
    }
    if (from.has_config_video_path()) {
      set_has_config_video_path();
      config_video_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_video_path_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgS2CClientInit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgS2CClientInit::CopyFrom(const MsgS2CClientInit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgS2CClientInit::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->watch_record())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->gird_theme())) return false;
  return true;
}

void MsgS2CClientInit::Swap(MsgS2CClientInit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgS2CClientInit::InternalSwap(MsgS2CClientInit* other) {
  watch_record_.UnsafeArenaSwap(&other->watch_record_);
  std::swap(vip_, other->vip_);
  resource_path_.Swap(&other->resource_path_);
  config_pic_path_.Swap(&other->config_pic_path_);
  config_video_path_.Swap(&other->config_video_path_);
  gird_theme_.UnsafeArenaSwap(&other->gird_theme_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgS2CClientInit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgS2CClientInit_descriptor_;
  metadata.reflection = MsgS2CClientInit_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgS2CClientInit

// repeated .message.MsgWatchRecordInfo watch_record = 1;
 int MsgS2CClientInit::watch_record_size() const {
  return watch_record_.size();
}
 void MsgS2CClientInit::clear_watch_record() {
  watch_record_.Clear();
}
 const ::message::MsgWatchRecordInfo& MsgS2CClientInit::watch_record(int index) const {
  // @@protoc_insertion_point(field_get:message.MsgS2CClientInit.watch_record)
  return watch_record_.Get(index);
}
 ::message::MsgWatchRecordInfo* MsgS2CClientInit::mutable_watch_record(int index) {
  // @@protoc_insertion_point(field_mutable:message.MsgS2CClientInit.watch_record)
  return watch_record_.Mutable(index);
}
 ::message::MsgWatchRecordInfo* MsgS2CClientInit::add_watch_record() {
  // @@protoc_insertion_point(field_add:message.MsgS2CClientInit.watch_record)
  return watch_record_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::message::MsgWatchRecordInfo >&
MsgS2CClientInit::watch_record() const {
  // @@protoc_insertion_point(field_list:message.MsgS2CClientInit.watch_record)
  return watch_record_;
}
 ::google::protobuf::RepeatedPtrField< ::message::MsgWatchRecordInfo >*
MsgS2CClientInit::mutable_watch_record() {
  // @@protoc_insertion_point(field_mutable_list:message.MsgS2CClientInit.watch_record)
  return &watch_record_;
}

// required int32 vip = 2;
 bool MsgS2CClientInit::has_vip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void MsgS2CClientInit::set_has_vip() {
  _has_bits_[0] |= 0x00000002u;
}
 void MsgS2CClientInit::clear_has_vip() {
  _has_bits_[0] &= ~0x00000002u;
}
 void MsgS2CClientInit::clear_vip() {
  vip_ = 0;
  clear_has_vip();
}
 ::google::protobuf::int32 MsgS2CClientInit::vip() const {
  // @@protoc_insertion_point(field_get:message.MsgS2CClientInit.vip)
  return vip_;
}
 void MsgS2CClientInit::set_vip(::google::protobuf::int32 value) {
  set_has_vip();
  vip_ = value;
  // @@protoc_insertion_point(field_set:message.MsgS2CClientInit.vip)
}

// required string resource_path = 3;
 bool MsgS2CClientInit::has_resource_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void MsgS2CClientInit::set_has_resource_path() {
  _has_bits_[0] |= 0x00000004u;
}
 void MsgS2CClientInit::clear_has_resource_path() {
  _has_bits_[0] &= ~0x00000004u;
}
 void MsgS2CClientInit::clear_resource_path() {
  resource_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_resource_path();
}
 const ::std::string& MsgS2CClientInit::resource_path() const {
  // @@protoc_insertion_point(field_get:message.MsgS2CClientInit.resource_path)
  return resource_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgS2CClientInit::set_resource_path(const ::std::string& value) {
  set_has_resource_path();
  resource_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.MsgS2CClientInit.resource_path)
}
 void MsgS2CClientInit::set_resource_path(const char* value) {
  set_has_resource_path();
  resource_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.MsgS2CClientInit.resource_path)
}
 void MsgS2CClientInit::set_resource_path(const char* value, size_t size) {
  set_has_resource_path();
  resource_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.MsgS2CClientInit.resource_path)
}
 ::std::string* MsgS2CClientInit::mutable_resource_path() {
  set_has_resource_path();
  // @@protoc_insertion_point(field_mutable:message.MsgS2CClientInit.resource_path)
  return resource_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgS2CClientInit::release_resource_path() {
  clear_has_resource_path();
  return resource_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgS2CClientInit::set_allocated_resource_path(::std::string* resource_path) {
  if (resource_path != NULL) {
    set_has_resource_path();
  } else {
    clear_has_resource_path();
  }
  resource_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource_path);
  // @@protoc_insertion_point(field_set_allocated:message.MsgS2CClientInit.resource_path)
}

// required string config_pic_path = 4;
 bool MsgS2CClientInit::has_config_pic_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void MsgS2CClientInit::set_has_config_pic_path() {
  _has_bits_[0] |= 0x00000008u;
}
 void MsgS2CClientInit::clear_has_config_pic_path() {
  _has_bits_[0] &= ~0x00000008u;
}
 void MsgS2CClientInit::clear_config_pic_path() {
  config_pic_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_config_pic_path();
}
 const ::std::string& MsgS2CClientInit::config_pic_path() const {
  // @@protoc_insertion_point(field_get:message.MsgS2CClientInit.config_pic_path)
  return config_pic_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgS2CClientInit::set_config_pic_path(const ::std::string& value) {
  set_has_config_pic_path();
  config_pic_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.MsgS2CClientInit.config_pic_path)
}
 void MsgS2CClientInit::set_config_pic_path(const char* value) {
  set_has_config_pic_path();
  config_pic_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.MsgS2CClientInit.config_pic_path)
}
 void MsgS2CClientInit::set_config_pic_path(const char* value, size_t size) {
  set_has_config_pic_path();
  config_pic_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.MsgS2CClientInit.config_pic_path)
}
 ::std::string* MsgS2CClientInit::mutable_config_pic_path() {
  set_has_config_pic_path();
  // @@protoc_insertion_point(field_mutable:message.MsgS2CClientInit.config_pic_path)
  return config_pic_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgS2CClientInit::release_config_pic_path() {
  clear_has_config_pic_path();
  return config_pic_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgS2CClientInit::set_allocated_config_pic_path(::std::string* config_pic_path) {
  if (config_pic_path != NULL) {
    set_has_config_pic_path();
  } else {
    clear_has_config_pic_path();
  }
  config_pic_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config_pic_path);
  // @@protoc_insertion_point(field_set_allocated:message.MsgS2CClientInit.config_pic_path)
}

// required string config_video_path = 5;
 bool MsgS2CClientInit::has_config_video_path() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void MsgS2CClientInit::set_has_config_video_path() {
  _has_bits_[0] |= 0x00000010u;
}
 void MsgS2CClientInit::clear_has_config_video_path() {
  _has_bits_[0] &= ~0x00000010u;
}
 void MsgS2CClientInit::clear_config_video_path() {
  config_video_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_config_video_path();
}
 const ::std::string& MsgS2CClientInit::config_video_path() const {
  // @@protoc_insertion_point(field_get:message.MsgS2CClientInit.config_video_path)
  return config_video_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgS2CClientInit::set_config_video_path(const ::std::string& value) {
  set_has_config_video_path();
  config_video_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.MsgS2CClientInit.config_video_path)
}
 void MsgS2CClientInit::set_config_video_path(const char* value) {
  set_has_config_video_path();
  config_video_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.MsgS2CClientInit.config_video_path)
}
 void MsgS2CClientInit::set_config_video_path(const char* value, size_t size) {
  set_has_config_video_path();
  config_video_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.MsgS2CClientInit.config_video_path)
}
 ::std::string* MsgS2CClientInit::mutable_config_video_path() {
  set_has_config_video_path();
  // @@protoc_insertion_point(field_mutable:message.MsgS2CClientInit.config_video_path)
  return config_video_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgS2CClientInit::release_config_video_path() {
  clear_has_config_video_path();
  return config_video_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgS2CClientInit::set_allocated_config_video_path(::std::string* config_video_path) {
  if (config_video_path != NULL) {
    set_has_config_video_path();
  } else {
    clear_has_config_video_path();
  }
  config_video_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config_video_path);
  // @@protoc_insertion_point(field_set_allocated:message.MsgS2CClientInit.config_video_path)
}

// repeated .message.MsgIntPair gird_theme = 6;
 int MsgS2CClientInit::gird_theme_size() const {
  return gird_theme_.size();
}
 void MsgS2CClientInit::clear_gird_theme() {
  gird_theme_.Clear();
}
 const ::message::MsgIntPair& MsgS2CClientInit::gird_theme(int index) const {
  // @@protoc_insertion_point(field_get:message.MsgS2CClientInit.gird_theme)
  return gird_theme_.Get(index);
}
 ::message::MsgIntPair* MsgS2CClientInit::mutable_gird_theme(int index) {
  // @@protoc_insertion_point(field_mutable:message.MsgS2CClientInit.gird_theme)
  return gird_theme_.Mutable(index);
}
 ::message::MsgIntPair* MsgS2CClientInit::add_gird_theme() {
  // @@protoc_insertion_point(field_add:message.MsgS2CClientInit.gird_theme)
  return gird_theme_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::message::MsgIntPair >&
MsgS2CClientInit::gird_theme() const {
  // @@protoc_insertion_point(field_list:message.MsgS2CClientInit.gird_theme)
  return gird_theme_;
}
 ::google::protobuf::RepeatedPtrField< ::message::MsgIntPair >*
MsgS2CClientInit::mutable_gird_theme() {
  // @@protoc_insertion_point(field_mutable_list:message.MsgS2CClientInit.gird_theme)
  return &gird_theme_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MsgC2SReqThemeInfo::kThemeIdFieldNumber;
#endif  // !_MSC_VER

MsgC2SReqThemeInfo::MsgC2SReqThemeInfo()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.MsgC2SReqThemeInfo)
}

void MsgC2SReqThemeInfo::InitAsDefaultInstance() {
}

MsgC2SReqThemeInfo::MsgC2SReqThemeInfo(const MsgC2SReqThemeInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.MsgC2SReqThemeInfo)
}

void MsgC2SReqThemeInfo::SharedCtor() {
  _cached_size_ = 0;
  theme_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgC2SReqThemeInfo::~MsgC2SReqThemeInfo() {
  // @@protoc_insertion_point(destructor:message.MsgC2SReqThemeInfo)
  SharedDtor();
}

void MsgC2SReqThemeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgC2SReqThemeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgC2SReqThemeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgC2SReqThemeInfo_descriptor_;
}

const MsgC2SReqThemeInfo& MsgC2SReqThemeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BodhiTV_2eproto();
  return *default_instance_;
}

MsgC2SReqThemeInfo* MsgC2SReqThemeInfo::default_instance_ = NULL;

MsgC2SReqThemeInfo* MsgC2SReqThemeInfo::New(::google::protobuf::Arena* arena) const {
  MsgC2SReqThemeInfo* n = new MsgC2SReqThemeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgC2SReqThemeInfo::Clear() {
  theme_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgC2SReqThemeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.MsgC2SReqThemeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Theme_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &theme_id_)));
          set_has_theme_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.MsgC2SReqThemeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.MsgC2SReqThemeInfo)
  return false;
#undef DO_
}

void MsgC2SReqThemeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.MsgC2SReqThemeInfo)
  // required int32 Theme_id = 1;
  if (has_theme_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->theme_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.MsgC2SReqThemeInfo)
}

::google::protobuf::uint8* MsgC2SReqThemeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MsgC2SReqThemeInfo)
  // required int32 Theme_id = 1;
  if (has_theme_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->theme_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MsgC2SReqThemeInfo)
  return target;
}

int MsgC2SReqThemeInfo::ByteSize() const {
  int total_size = 0;

  // required int32 Theme_id = 1;
  if (has_theme_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->theme_id());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgC2SReqThemeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgC2SReqThemeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgC2SReqThemeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgC2SReqThemeInfo::MergeFrom(const MsgC2SReqThemeInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_theme_id()) {
      set_theme_id(from.theme_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgC2SReqThemeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgC2SReqThemeInfo::CopyFrom(const MsgC2SReqThemeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgC2SReqThemeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgC2SReqThemeInfo::Swap(MsgC2SReqThemeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgC2SReqThemeInfo::InternalSwap(MsgC2SReqThemeInfo* other) {
  std::swap(theme_id_, other->theme_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgC2SReqThemeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgC2SReqThemeInfo_descriptor_;
  metadata.reflection = MsgC2SReqThemeInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgC2SReqThemeInfo

// required int32 Theme_id = 1;
 bool MsgC2SReqThemeInfo::has_theme_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void MsgC2SReqThemeInfo::set_has_theme_id() {
  _has_bits_[0] |= 0x00000001u;
}
 void MsgC2SReqThemeInfo::clear_has_theme_id() {
  _has_bits_[0] &= ~0x00000001u;
}
 void MsgC2SReqThemeInfo::clear_theme_id() {
  theme_id_ = 0;
  clear_has_theme_id();
}
 ::google::protobuf::int32 MsgC2SReqThemeInfo::theme_id() const {
  // @@protoc_insertion_point(field_get:message.MsgC2SReqThemeInfo.Theme_id)
  return theme_id_;
}
 void MsgC2SReqThemeInfo::set_theme_id(::google::protobuf::int32 value) {
  set_has_theme_id();
  theme_id_ = value;
  // @@protoc_insertion_point(field_set:message.MsgC2SReqThemeInfo.Theme_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MsgS2CMovieThemeInfoACK::kInfoFieldNumber;
#endif  // !_MSC_VER

MsgS2CMovieThemeInfoACK::MsgS2CMovieThemeInfoACK()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.MsgS2CMovieThemeInfoACK)
}

void MsgS2CMovieThemeInfoACK::InitAsDefaultInstance() {
  info_ = const_cast< ::message::MsgMovieTheme*>(&::message::MsgMovieTheme::default_instance());
}

MsgS2CMovieThemeInfoACK::MsgS2CMovieThemeInfoACK(const MsgS2CMovieThemeInfoACK& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.MsgS2CMovieThemeInfoACK)
}

void MsgS2CMovieThemeInfoACK::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgS2CMovieThemeInfoACK::~MsgS2CMovieThemeInfoACK() {
  // @@protoc_insertion_point(destructor:message.MsgS2CMovieThemeInfoACK)
  SharedDtor();
}

void MsgS2CMovieThemeInfoACK::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void MsgS2CMovieThemeInfoACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgS2CMovieThemeInfoACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgS2CMovieThemeInfoACK_descriptor_;
}

const MsgS2CMovieThemeInfoACK& MsgS2CMovieThemeInfoACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BodhiTV_2eproto();
  return *default_instance_;
}

MsgS2CMovieThemeInfoACK* MsgS2CMovieThemeInfoACK::default_instance_ = NULL;

MsgS2CMovieThemeInfoACK* MsgS2CMovieThemeInfoACK::New(::google::protobuf::Arena* arena) const {
  MsgS2CMovieThemeInfoACK* n = new MsgS2CMovieThemeInfoACK;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgS2CMovieThemeInfoACK::Clear() {
  if (has_info()) {
    if (info_ != NULL) info_->::message::MsgMovieTheme::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgS2CMovieThemeInfoACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.MsgS2CMovieThemeInfoACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .message.MsgMovieTheme info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.MsgS2CMovieThemeInfoACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.MsgS2CMovieThemeInfoACK)
  return false;
#undef DO_
}

void MsgS2CMovieThemeInfoACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.MsgS2CMovieThemeInfoACK)
  // required .message.MsgMovieTheme info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.MsgS2CMovieThemeInfoACK)
}

::google::protobuf::uint8* MsgS2CMovieThemeInfoACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MsgS2CMovieThemeInfoACK)
  // required .message.MsgMovieTheme info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->info_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MsgS2CMovieThemeInfoACK)
  return target;
}

int MsgS2CMovieThemeInfoACK::ByteSize() const {
  int total_size = 0;

  // required .message.MsgMovieTheme info = 1;
  if (has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgS2CMovieThemeInfoACK::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgS2CMovieThemeInfoACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgS2CMovieThemeInfoACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgS2CMovieThemeInfoACK::MergeFrom(const MsgS2CMovieThemeInfoACK& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::message::MsgMovieTheme::MergeFrom(from.info());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgS2CMovieThemeInfoACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgS2CMovieThemeInfoACK::CopyFrom(const MsgS2CMovieThemeInfoACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgS2CMovieThemeInfoACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info_->IsInitialized()) return false;
  }
  return true;
}

void MsgS2CMovieThemeInfoACK::Swap(MsgS2CMovieThemeInfoACK* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgS2CMovieThemeInfoACK::InternalSwap(MsgS2CMovieThemeInfoACK* other) {
  std::swap(info_, other->info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgS2CMovieThemeInfoACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgS2CMovieThemeInfoACK_descriptor_;
  metadata.reflection = MsgS2CMovieThemeInfoACK_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgS2CMovieThemeInfoACK

// required .message.MsgMovieTheme info = 1;
 bool MsgS2CMovieThemeInfoACK::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void MsgS2CMovieThemeInfoACK::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
 void MsgS2CMovieThemeInfoACK::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
 void MsgS2CMovieThemeInfoACK::clear_info() {
  if (info_ != NULL) info_->::message::MsgMovieTheme::Clear();
  clear_has_info();
}
 const ::message::MsgMovieTheme& MsgS2CMovieThemeInfoACK::info() const {
  // @@protoc_insertion_point(field_get:message.MsgS2CMovieThemeInfoACK.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
 ::message::MsgMovieTheme* MsgS2CMovieThemeInfoACK::mutable_info() {
  set_has_info();
  if (info_ == NULL) {
    info_ = new ::message::MsgMovieTheme;
  }
  // @@protoc_insertion_point(field_mutable:message.MsgS2CMovieThemeInfoACK.info)
  return info_;
}
 ::message::MsgMovieTheme* MsgS2CMovieThemeInfoACK::release_info() {
  clear_has_info();
  ::message::MsgMovieTheme* temp = info_;
  info_ = NULL;
  return temp;
}
 void MsgS2CMovieThemeInfoACK::set_allocated_info(::message::MsgMovieTheme* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:message.MsgS2CMovieThemeInfoACK.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MsgC2SReqMovieInfo::kMovieIdFieldNumber;
#endif  // !_MSC_VER

MsgC2SReqMovieInfo::MsgC2SReqMovieInfo()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.MsgC2SReqMovieInfo)
}

void MsgC2SReqMovieInfo::InitAsDefaultInstance() {
}

MsgC2SReqMovieInfo::MsgC2SReqMovieInfo(const MsgC2SReqMovieInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.MsgC2SReqMovieInfo)
}

void MsgC2SReqMovieInfo::SharedCtor() {
  _cached_size_ = 0;
  movie_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgC2SReqMovieInfo::~MsgC2SReqMovieInfo() {
  // @@protoc_insertion_point(destructor:message.MsgC2SReqMovieInfo)
  SharedDtor();
}

void MsgC2SReqMovieInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgC2SReqMovieInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgC2SReqMovieInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgC2SReqMovieInfo_descriptor_;
}

const MsgC2SReqMovieInfo& MsgC2SReqMovieInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BodhiTV_2eproto();
  return *default_instance_;
}

MsgC2SReqMovieInfo* MsgC2SReqMovieInfo::default_instance_ = NULL;

MsgC2SReqMovieInfo* MsgC2SReqMovieInfo::New(::google::protobuf::Arena* arena) const {
  MsgC2SReqMovieInfo* n = new MsgC2SReqMovieInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgC2SReqMovieInfo::Clear() {
  movie_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgC2SReqMovieInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.MsgC2SReqMovieInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 movie_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movie_id_)));
          set_has_movie_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.MsgC2SReqMovieInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.MsgC2SReqMovieInfo)
  return false;
#undef DO_
}

void MsgC2SReqMovieInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.MsgC2SReqMovieInfo)
  // required int32 movie_id = 1;
  if (has_movie_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->movie_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.MsgC2SReqMovieInfo)
}

::google::protobuf::uint8* MsgC2SReqMovieInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MsgC2SReqMovieInfo)
  // required int32 movie_id = 1;
  if (has_movie_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->movie_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MsgC2SReqMovieInfo)
  return target;
}

int MsgC2SReqMovieInfo::ByteSize() const {
  int total_size = 0;

  // required int32 movie_id = 1;
  if (has_movie_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->movie_id());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgC2SReqMovieInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgC2SReqMovieInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgC2SReqMovieInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgC2SReqMovieInfo::MergeFrom(const MsgC2SReqMovieInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_movie_id()) {
      set_movie_id(from.movie_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgC2SReqMovieInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgC2SReqMovieInfo::CopyFrom(const MsgC2SReqMovieInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgC2SReqMovieInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgC2SReqMovieInfo::Swap(MsgC2SReqMovieInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgC2SReqMovieInfo::InternalSwap(MsgC2SReqMovieInfo* other) {
  std::swap(movie_id_, other->movie_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgC2SReqMovieInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgC2SReqMovieInfo_descriptor_;
  metadata.reflection = MsgC2SReqMovieInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgC2SReqMovieInfo

// required int32 movie_id = 1;
 bool MsgC2SReqMovieInfo::has_movie_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void MsgC2SReqMovieInfo::set_has_movie_id() {
  _has_bits_[0] |= 0x00000001u;
}
 void MsgC2SReqMovieInfo::clear_has_movie_id() {
  _has_bits_[0] &= ~0x00000001u;
}
 void MsgC2SReqMovieInfo::clear_movie_id() {
  movie_id_ = 0;
  clear_has_movie_id();
}
 ::google::protobuf::int32 MsgC2SReqMovieInfo::movie_id() const {
  // @@protoc_insertion_point(field_get:message.MsgC2SReqMovieInfo.movie_id)
  return movie_id_;
}
 void MsgC2SReqMovieInfo::set_movie_id(::google::protobuf::int32 value) {
  set_has_movie_id();
  movie_id_ = value;
  // @@protoc_insertion_point(field_set:message.MsgC2SReqMovieInfo.movie_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MsgS2CMovieInfoACK::kInfoFieldNumber;
#endif  // !_MSC_VER

MsgS2CMovieInfoACK::MsgS2CMovieInfoACK()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.MsgS2CMovieInfoACK)
}

void MsgS2CMovieInfoACK::InitAsDefaultInstance() {
  info_ = const_cast< ::message::MsgMovie*>(&::message::MsgMovie::default_instance());
}

MsgS2CMovieInfoACK::MsgS2CMovieInfoACK(const MsgS2CMovieInfoACK& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.MsgS2CMovieInfoACK)
}

void MsgS2CMovieInfoACK::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgS2CMovieInfoACK::~MsgS2CMovieInfoACK() {
  // @@protoc_insertion_point(destructor:message.MsgS2CMovieInfoACK)
  SharedDtor();
}

void MsgS2CMovieInfoACK::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void MsgS2CMovieInfoACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgS2CMovieInfoACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgS2CMovieInfoACK_descriptor_;
}

const MsgS2CMovieInfoACK& MsgS2CMovieInfoACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BodhiTV_2eproto();
  return *default_instance_;
}

MsgS2CMovieInfoACK* MsgS2CMovieInfoACK::default_instance_ = NULL;

MsgS2CMovieInfoACK* MsgS2CMovieInfoACK::New(::google::protobuf::Arena* arena) const {
  MsgS2CMovieInfoACK* n = new MsgS2CMovieInfoACK;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgS2CMovieInfoACK::Clear() {
  if (has_info()) {
    if (info_ != NULL) info_->::message::MsgMovie::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgS2CMovieInfoACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.MsgS2CMovieInfoACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .message.MsgMovie info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.MsgS2CMovieInfoACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.MsgS2CMovieInfoACK)
  return false;
#undef DO_
}

void MsgS2CMovieInfoACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.MsgS2CMovieInfoACK)
  // required .message.MsgMovie info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.MsgS2CMovieInfoACK)
}

::google::protobuf::uint8* MsgS2CMovieInfoACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MsgS2CMovieInfoACK)
  // required .message.MsgMovie info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->info_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MsgS2CMovieInfoACK)
  return target;
}

int MsgS2CMovieInfoACK::ByteSize() const {
  int total_size = 0;

  // required .message.MsgMovie info = 1;
  if (has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgS2CMovieInfoACK::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgS2CMovieInfoACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgS2CMovieInfoACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgS2CMovieInfoACK::MergeFrom(const MsgS2CMovieInfoACK& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::message::MsgMovie::MergeFrom(from.info());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgS2CMovieInfoACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgS2CMovieInfoACK::CopyFrom(const MsgS2CMovieInfoACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgS2CMovieInfoACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info_->IsInitialized()) return false;
  }
  return true;
}

void MsgS2CMovieInfoACK::Swap(MsgS2CMovieInfoACK* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgS2CMovieInfoACK::InternalSwap(MsgS2CMovieInfoACK* other) {
  std::swap(info_, other->info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgS2CMovieInfoACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgS2CMovieInfoACK_descriptor_;
  metadata.reflection = MsgS2CMovieInfoACK_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgS2CMovieInfoACK

// required .message.MsgMovie info = 1;
 bool MsgS2CMovieInfoACK::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void MsgS2CMovieInfoACK::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
 void MsgS2CMovieInfoACK::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
 void MsgS2CMovieInfoACK::clear_info() {
  if (info_ != NULL) info_->::message::MsgMovie::Clear();
  clear_has_info();
}
 const ::message::MsgMovie& MsgS2CMovieInfoACK::info() const {
  // @@protoc_insertion_point(field_get:message.MsgS2CMovieInfoACK.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
 ::message::MsgMovie* MsgS2CMovieInfoACK::mutable_info() {
  set_has_info();
  if (info_ == NULL) {
    info_ = new ::message::MsgMovie;
  }
  // @@protoc_insertion_point(field_mutable:message.MsgS2CMovieInfoACK.info)
  return info_;
}
 ::message::MsgMovie* MsgS2CMovieInfoACK::release_info() {
  clear_has_info();
  ::message::MsgMovie* temp = info_;
  info_ = NULL;
  return temp;
}
 void MsgS2CMovieInfoACK::set_allocated_info(::message::MsgMovie* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:message.MsgS2CMovieInfoACK.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
