// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BodhiTV.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BodhiTV.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace message {

namespace {

const ::google::protobuf::Descriptor* MsgC2SReqMovieThemes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgC2SReqMovieThemes_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgS2CMovieThemesACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgS2CMovieThemesACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgS2CClientInit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgS2CClientInit_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgC2SReqThemeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgC2SReqThemeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgS2CThemeInfoACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgS2CThemeInfoACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgC2SReqMovieInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgC2SReqMovieInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgS2CMovieInfoACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgS2CMovieInfoACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgC2SReqPlayVideo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgC2SReqPlayVideo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgC2SPlayVideoACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgC2SPlayVideoACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgC2SReqStopVideo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgC2SReqStopVideo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgC2SStopVideoACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgC2SStopVideoACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgC2SReqAddMovieToFavourite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgC2SReqAddMovieToFavourite_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgS2CAddMovieToFavouriteACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgS2CAddMovieToFavouriteACK_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgError_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_BodhiTV_2eproto() {
  protobuf_AddDesc_BodhiTV_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BodhiTV.proto");
  GOOGLE_CHECK(file != NULL);
  MsgC2SReqMovieThemes_descriptor_ = file->message_type(0);
  static const int MsgC2SReqMovieThemes_offsets_[1] = {
  };
  MsgC2SReqMovieThemes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgC2SReqMovieThemes_descriptor_,
      MsgC2SReqMovieThemes::default_instance_,
      MsgC2SReqMovieThemes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SReqMovieThemes, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgC2SReqMovieThemes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SReqMovieThemes, _internal_metadata_),
      -1);
  MsgS2CMovieThemesACK_descriptor_ = file->message_type(1);
  static const int MsgS2CMovieThemesACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CMovieThemesACK, infos_),
  };
  MsgS2CMovieThemesACK_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgS2CMovieThemesACK_descriptor_,
      MsgS2CMovieThemesACK::default_instance_,
      MsgS2CMovieThemesACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CMovieThemesACK, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgS2CMovieThemesACK),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CMovieThemesACK, _internal_metadata_),
      -1);
  MsgS2CClientInit_descriptor_ = file->message_type(2);
  static const int MsgS2CClientInit_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CClientInit, watch_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CClientInit, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CClientInit, resource_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CClientInit, config_pic_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CClientInit, config_video_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CClientInit, gird_theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CClientInit, name_),
  };
  MsgS2CClientInit_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgS2CClientInit_descriptor_,
      MsgS2CClientInit::default_instance_,
      MsgS2CClientInit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CClientInit, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgS2CClientInit),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CClientInit, _internal_metadata_),
      -1);
  MsgC2SReqThemeInfo_descriptor_ = file->message_type(3);
  static const int MsgC2SReqThemeInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SReqThemeInfo, theme_id_),
  };
  MsgC2SReqThemeInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgC2SReqThemeInfo_descriptor_,
      MsgC2SReqThemeInfo::default_instance_,
      MsgC2SReqThemeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SReqThemeInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgC2SReqThemeInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SReqThemeInfo, _internal_metadata_),
      -1);
  MsgS2CThemeInfoACK_descriptor_ = file->message_type(4);
  static const int MsgS2CThemeInfoACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CThemeInfoACK, info_),
  };
  MsgS2CThemeInfoACK_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgS2CThemeInfoACK_descriptor_,
      MsgS2CThemeInfoACK::default_instance_,
      MsgS2CThemeInfoACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CThemeInfoACK, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgS2CThemeInfoACK),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CThemeInfoACK, _internal_metadata_),
      -1);
  MsgC2SReqMovieInfo_descriptor_ = file->message_type(5);
  static const int MsgC2SReqMovieInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SReqMovieInfo, movie_id_),
  };
  MsgC2SReqMovieInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgC2SReqMovieInfo_descriptor_,
      MsgC2SReqMovieInfo::default_instance_,
      MsgC2SReqMovieInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SReqMovieInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgC2SReqMovieInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SReqMovieInfo, _internal_metadata_),
      -1);
  MsgS2CMovieInfoACK_descriptor_ = file->message_type(6);
  static const int MsgS2CMovieInfoACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CMovieInfoACK, info_),
  };
  MsgS2CMovieInfoACK_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgS2CMovieInfoACK_descriptor_,
      MsgS2CMovieInfoACK::default_instance_,
      MsgS2CMovieInfoACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CMovieInfoACK, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgS2CMovieInfoACK),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CMovieInfoACK, _internal_metadata_),
      -1);
  MsgC2SReqPlayVideo_descriptor_ = file->message_type(7);
  static const int MsgC2SReqPlayVideo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SReqPlayVideo, movie_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SReqPlayVideo, video_id_),
  };
  MsgC2SReqPlayVideo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgC2SReqPlayVideo_descriptor_,
      MsgC2SReqPlayVideo::default_instance_,
      MsgC2SReqPlayVideo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SReqPlayVideo, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgC2SReqPlayVideo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SReqPlayVideo, _internal_metadata_),
      -1);
  MsgC2SPlayVideoACK_descriptor_ = file->message_type(8);
  static const int MsgC2SPlayVideoACK_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SPlayVideoACK, movie_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SPlayVideoACK, video_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SPlayVideoACK, error_),
  };
  MsgC2SPlayVideoACK_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgC2SPlayVideoACK_descriptor_,
      MsgC2SPlayVideoACK::default_instance_,
      MsgC2SPlayVideoACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SPlayVideoACK, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgC2SPlayVideoACK),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SPlayVideoACK, _internal_metadata_),
      -1);
  MsgC2SReqStopVideo_descriptor_ = file->message_type(9);
  static const int MsgC2SReqStopVideo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SReqStopVideo, movie_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SReqStopVideo, video_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SReqStopVideo, progress_),
  };
  MsgC2SReqStopVideo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgC2SReqStopVideo_descriptor_,
      MsgC2SReqStopVideo::default_instance_,
      MsgC2SReqStopVideo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SReqStopVideo, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgC2SReqStopVideo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SReqStopVideo, _internal_metadata_),
      -1);
  MsgC2SStopVideoACK_descriptor_ = file->message_type(10);
  static const int MsgC2SStopVideoACK_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SStopVideoACK, movie_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SStopVideoACK, video_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SStopVideoACK, error_),
  };
  MsgC2SStopVideoACK_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgC2SStopVideoACK_descriptor_,
      MsgC2SStopVideoACK::default_instance_,
      MsgC2SStopVideoACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SStopVideoACK, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgC2SStopVideoACK),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SStopVideoACK, _internal_metadata_),
      -1);
  MsgC2SReqAddMovieToFavourite_descriptor_ = file->message_type(11);
  static const int MsgC2SReqAddMovieToFavourite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SReqAddMovieToFavourite, movie_id_),
  };
  MsgC2SReqAddMovieToFavourite_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgC2SReqAddMovieToFavourite_descriptor_,
      MsgC2SReqAddMovieToFavourite::default_instance_,
      MsgC2SReqAddMovieToFavourite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SReqAddMovieToFavourite, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgC2SReqAddMovieToFavourite),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgC2SReqAddMovieToFavourite, _internal_metadata_),
      -1);
  MsgS2CAddMovieToFavouriteACK_descriptor_ = file->message_type(12);
  static const int MsgS2CAddMovieToFavouriteACK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CAddMovieToFavouriteACK, movie_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CAddMovieToFavouriteACK, error_),
  };
  MsgS2CAddMovieToFavouriteACK_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgS2CAddMovieToFavouriteACK_descriptor_,
      MsgS2CAddMovieToFavouriteACK::default_instance_,
      MsgS2CAddMovieToFavouriteACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CAddMovieToFavouriteACK, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgS2CAddMovieToFavouriteACK),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2CAddMovieToFavouriteACK, _internal_metadata_),
      -1);
  MsgError_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BodhiTV_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgC2SReqMovieThemes_descriptor_, &MsgC2SReqMovieThemes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgS2CMovieThemesACK_descriptor_, &MsgS2CMovieThemesACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgS2CClientInit_descriptor_, &MsgS2CClientInit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgC2SReqThemeInfo_descriptor_, &MsgC2SReqThemeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgS2CThemeInfoACK_descriptor_, &MsgS2CThemeInfoACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgC2SReqMovieInfo_descriptor_, &MsgC2SReqMovieInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgS2CMovieInfoACK_descriptor_, &MsgS2CMovieInfoACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgC2SReqPlayVideo_descriptor_, &MsgC2SReqPlayVideo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgC2SPlayVideoACK_descriptor_, &MsgC2SPlayVideoACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgC2SReqStopVideo_descriptor_, &MsgC2SReqStopVideo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgC2SStopVideoACK_descriptor_, &MsgC2SStopVideoACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgC2SReqAddMovieToFavourite_descriptor_, &MsgC2SReqAddMovieToFavourite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgS2CAddMovieToFavouriteACK_descriptor_, &MsgS2CAddMovieToFavouriteACK::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BodhiTV_2eproto() {
  delete MsgC2SReqMovieThemes::default_instance_;
  delete MsgC2SReqMovieThemes_reflection_;
  delete MsgS2CMovieThemesACK::default_instance_;
  delete MsgS2CMovieThemesACK_reflection_;
  delete MsgS2CClientInit::default_instance_;
  delete MsgS2CClientInit_reflection_;
  delete MsgC2SReqThemeInfo::default_instance_;
  delete MsgC2SReqThemeInfo_reflection_;
  delete MsgS2CThemeInfoACK::default_instance_;
  delete MsgS2CThemeInfoACK_reflection_;
  delete MsgC2SReqMovieInfo::default_instance_;
  delete MsgC2SReqMovieInfo_reflection_;
  delete MsgS2CMovieInfoACK::default_instance_;
  delete MsgS2CMovieInfoACK_reflection_;
  delete MsgC2SReqPlayVideo::default_instance_;
  delete MsgC2SReqPlayVideo_reflection_;
  delete MsgC2SPlayVideoACK::default_instance_;
  delete MsgC2SPlayVideoACK_reflection_;
  delete MsgC2SReqStopVideo::default_instance_;
  delete MsgC2SReqStopVideo_reflection_;
  delete MsgC2SStopVideoACK::default_instance_;
  delete MsgC2SStopVideoACK_reflection_;
  delete MsgC2SReqAddMovieToFavourite::default_instance_;
  delete MsgC2SReqAddMovieToFavourite_reflection_;
  delete MsgS2CAddMovieToFavouriteACK::default_instance_;
  delete MsgS2CAddMovieToFavouriteACK_reflection_;
}

void protobuf_AddDesc_BodhiTV_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::message::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rBodhiTV.proto\022\007message\032\014common.proto\"\026"
    "\n\024MsgC2SReqMovieThemes\"E\n\024MsgS2CMovieThe"
    "mesACK\022-\n\005infos\030\001 \003(\0132\036.message.MsgMovie"
    "ThemeExternal\"\324\001\n\020MsgS2CClientInit\0221\n\014wa"
    "tch_record\030\001 \003(\0132\033.message.MsgWatchRecor"
    "dInfo\022\013\n\003vip\030\002 \002(\005\022\025\n\rresource_path\030\003 \002("
    "\t\022\027\n\017config_pic_path\030\004 \002(\t\022\031\n\021config_vid"
    "eo_path\030\005 \002(\t\022\'\n\ngird_theme\030\006 \003(\0132\023.mess"
    "age.MsgIntPair\022\014\n\004name\030\007 \002(\t\"&\n\022MsgC2SRe"
    "qThemeInfo\022\020\n\010Theme_id\030\001 \002(\003\":\n\022MsgS2CTh"
    "emeInfoACK\022$\n\004info\030\001 \002(\0132\026.message.MsgMo"
    "vieTheme\"&\n\022MsgC2SReqMovieInfo\022\020\n\010movie_"
    "id\030\001 \002(\003\"5\n\022MsgS2CMovieInfoACK\022\037\n\004info\030\001"
    " \002(\0132\021.message.MsgMovie\"8\n\022MsgC2SReqPlay"
    "Video\022\020\n\010movie_id\030\001 \002(\003\022\020\n\010video_id\030\002 \002("
    "\003\"g\n\022MsgC2SPlayVideoACK\022\020\n\010movie_id\030\001 \002("
    "\003\022\020\n\010video_id\030\002 \002(\003\022-\n\005error\030\003 \002(\0162\021.mes"
    "sage.MsgError:\013MsgError_NO\"J\n\022MsgC2SReqS"
    "topVideo\022\020\n\010movie_id\030\001 \002(\003\022\020\n\010video_id\030\002"
    " \002(\003\022\020\n\010progress\030\003 \002(\005\"g\n\022MsgC2SStopVide"
    "oACK\022\020\n\010movie_id\030\001 \002(\003\022\020\n\010video_id\030\002 \002(\003"
    "\022-\n\005error\030\003 \002(\0162\021.message.MsgError:\013MsgE"
    "rror_NO\"0\n\034MsgC2SReqAddMovieToFavourite\022"
    "\020\n\010movie_id\030\001 \002(\003\"_\n\034MsgS2CAddMovieToFav"
    "ouriteACK\022\020\n\010movie_id\030\001 \002(\003\022-\n\005error\030\002 \002"
    "(\0162\021.message.MsgError:\013MsgError_NO*\243\001\n\010M"
    "sgError\022\017\n\013MsgError_NO\020\000\022+\n\'MsgError_Fai"
    "ledToPlayVideoNotFoundVideo\020\001\022)\n%MsgErro"
    "r_FailedToPlayVideoRequiredVIP\020\002\022.\n*MsgE"
    "rror_FailedToAddFavouriteNotFoundMovie\020\003", 1200);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BodhiTV.proto", &protobuf_RegisterTypes);
  MsgC2SReqMovieThemes::default_instance_ = new MsgC2SReqMovieThemes();
  MsgS2CMovieThemesACK::default_instance_ = new MsgS2CMovieThemesACK();
  MsgS2CClientInit::default_instance_ = new MsgS2CClientInit();
  MsgC2SReqThemeInfo::default_instance_ = new MsgC2SReqThemeInfo();
  MsgS2CThemeInfoACK::default_instance_ = new MsgS2CThemeInfoACK();
  MsgC2SReqMovieInfo::default_instance_ = new MsgC2SReqMovieInfo();
  MsgS2CMovieInfoACK::default_instance_ = new MsgS2CMovieInfoACK();
  MsgC2SReqPlayVideo::default_instance_ = new MsgC2SReqPlayVideo();
  MsgC2SPlayVideoACK::default_instance_ = new MsgC2SPlayVideoACK();
  MsgC2SReqStopVideo::default_instance_ = new MsgC2SReqStopVideo();
  MsgC2SStopVideoACK::default_instance_ = new MsgC2SStopVideoACK();
  MsgC2SReqAddMovieToFavourite::default_instance_ = new MsgC2SReqAddMovieToFavourite();
  MsgS2CAddMovieToFavouriteACK::default_instance_ = new MsgS2CAddMovieToFavouriteACK();
  MsgC2SReqMovieThemes::default_instance_->InitAsDefaultInstance();
  MsgS2CMovieThemesACK::default_instance_->InitAsDefaultInstance();
  MsgS2CClientInit::default_instance_->InitAsDefaultInstance();
  MsgC2SReqThemeInfo::default_instance_->InitAsDefaultInstance();
  MsgS2CThemeInfoACK::default_instance_->InitAsDefaultInstance();
  MsgC2SReqMovieInfo::default_instance_->InitAsDefaultInstance();
  MsgS2CMovieInfoACK::default_instance_->InitAsDefaultInstance();
  MsgC2SReqPlayVideo::default_instance_->InitAsDefaultInstance();
  MsgC2SPlayVideoACK::default_instance_->InitAsDefaultInstance();
  MsgC2SReqStopVideo::default_instance_->InitAsDefaultInstance();
  MsgC2SStopVideoACK::default_instance_->InitAsDefaultInstance();
  MsgC2SReqAddMovieToFavourite::default_instance_->InitAsDefaultInstance();
  MsgS2CAddMovieToFavouriteACK::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BodhiTV_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BodhiTV_2eproto {
  StaticDescriptorInitializer_BodhiTV_2eproto() {
    protobuf_AddDesc_BodhiTV_2eproto();
  }
} static_descriptor_initializer_BodhiTV_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgError_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgError_descriptor_;
}
bool MsgError_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgC2SReqMovieThemes::MsgC2SReqMovieThemes()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.MsgC2SReqMovieThemes)
}

void MsgC2SReqMovieThemes::InitAsDefaultInstance() {
}

MsgC2SReqMovieThemes::MsgC2SReqMovieThemes(const MsgC2SReqMovieThemes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.MsgC2SReqMovieThemes)
}

void MsgC2SReqMovieThemes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgC2SReqMovieThemes::~MsgC2SReqMovieThemes() {
  // @@protoc_insertion_point(destructor:message.MsgC2SReqMovieThemes)
  SharedDtor();
}

void MsgC2SReqMovieThemes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgC2SReqMovieThemes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgC2SReqMovieThemes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgC2SReqMovieThemes_descriptor_;
}

const MsgC2SReqMovieThemes& MsgC2SReqMovieThemes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BodhiTV_2eproto();
  return *default_instance_;
}

MsgC2SReqMovieThemes* MsgC2SReqMovieThemes::default_instance_ = NULL;

MsgC2SReqMovieThemes* MsgC2SReqMovieThemes::New(::google::protobuf::Arena* arena) const {
  MsgC2SReqMovieThemes* n = new MsgC2SReqMovieThemes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgC2SReqMovieThemes::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgC2SReqMovieThemes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.MsgC2SReqMovieThemes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:message.MsgC2SReqMovieThemes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.MsgC2SReqMovieThemes)
  return false;
#undef DO_
}

void MsgC2SReqMovieThemes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.MsgC2SReqMovieThemes)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.MsgC2SReqMovieThemes)
}

::google::protobuf::uint8* MsgC2SReqMovieThemes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MsgC2SReqMovieThemes)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MsgC2SReqMovieThemes)
  return target;
}

int MsgC2SReqMovieThemes::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgC2SReqMovieThemes::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgC2SReqMovieThemes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgC2SReqMovieThemes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgC2SReqMovieThemes::MergeFrom(const MsgC2SReqMovieThemes& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgC2SReqMovieThemes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgC2SReqMovieThemes::CopyFrom(const MsgC2SReqMovieThemes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgC2SReqMovieThemes::IsInitialized() const {

  return true;
}

void MsgC2SReqMovieThemes::Swap(MsgC2SReqMovieThemes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgC2SReqMovieThemes::InternalSwap(MsgC2SReqMovieThemes* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgC2SReqMovieThemes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgC2SReqMovieThemes_descriptor_;
  metadata.reflection = MsgC2SReqMovieThemes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgC2SReqMovieThemes

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MsgS2CMovieThemesACK::kInfosFieldNumber;
#endif  // !_MSC_VER

MsgS2CMovieThemesACK::MsgS2CMovieThemesACK()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.MsgS2CMovieThemesACK)
}

void MsgS2CMovieThemesACK::InitAsDefaultInstance() {
}

MsgS2CMovieThemesACK::MsgS2CMovieThemesACK(const MsgS2CMovieThemesACK& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.MsgS2CMovieThemesACK)
}

void MsgS2CMovieThemesACK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgS2CMovieThemesACK::~MsgS2CMovieThemesACK() {
  // @@protoc_insertion_point(destructor:message.MsgS2CMovieThemesACK)
  SharedDtor();
}

void MsgS2CMovieThemesACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgS2CMovieThemesACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgS2CMovieThemesACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgS2CMovieThemesACK_descriptor_;
}

const MsgS2CMovieThemesACK& MsgS2CMovieThemesACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BodhiTV_2eproto();
  return *default_instance_;
}

MsgS2CMovieThemesACK* MsgS2CMovieThemesACK::default_instance_ = NULL;

MsgS2CMovieThemesACK* MsgS2CMovieThemesACK::New(::google::protobuf::Arena* arena) const {
  MsgS2CMovieThemesACK* n = new MsgS2CMovieThemesACK;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgS2CMovieThemesACK::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgS2CMovieThemesACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.MsgS2CMovieThemesACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .message.MsgMovieThemeExternal infos = 1;
      case 1: {
        if (tag == 10) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.MsgS2CMovieThemesACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.MsgS2CMovieThemesACK)
  return false;
#undef DO_
}

void MsgS2CMovieThemesACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.MsgS2CMovieThemesACK)
  // repeated .message.MsgMovieThemeExternal infos = 1;
  for (unsigned int i = 0, n = this->infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.MsgS2CMovieThemesACK)
}

::google::protobuf::uint8* MsgS2CMovieThemesACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MsgS2CMovieThemesACK)
  // repeated .message.MsgMovieThemeExternal infos = 1;
  for (unsigned int i = 0, n = this->infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MsgS2CMovieThemesACK)
  return target;
}

int MsgS2CMovieThemesACK::ByteSize() const {
  int total_size = 0;

  // repeated .message.MsgMovieThemeExternal infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgS2CMovieThemesACK::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgS2CMovieThemesACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgS2CMovieThemesACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgS2CMovieThemesACK::MergeFrom(const MsgS2CMovieThemesACK& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  infos_.MergeFrom(from.infos_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgS2CMovieThemesACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgS2CMovieThemesACK::CopyFrom(const MsgS2CMovieThemesACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgS2CMovieThemesACK::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->infos())) return false;
  return true;
}

void MsgS2CMovieThemesACK::Swap(MsgS2CMovieThemesACK* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgS2CMovieThemesACK::InternalSwap(MsgS2CMovieThemesACK* other) {
  infos_.UnsafeArenaSwap(&other->infos_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgS2CMovieThemesACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgS2CMovieThemesACK_descriptor_;
  metadata.reflection = MsgS2CMovieThemesACK_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgS2CMovieThemesACK

// repeated .message.MsgMovieThemeExternal infos = 1;
 int MsgS2CMovieThemesACK::infos_size() const {
  return infos_.size();
}
 void MsgS2CMovieThemesACK::clear_infos() {
  infos_.Clear();
}
 const ::message::MsgMovieThemeExternal& MsgS2CMovieThemesACK::infos(int index) const {
  // @@protoc_insertion_point(field_get:message.MsgS2CMovieThemesACK.infos)
  return infos_.Get(index);
}
 ::message::MsgMovieThemeExternal* MsgS2CMovieThemesACK::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:message.MsgS2CMovieThemesACK.infos)
  return infos_.Mutable(index);
}
 ::message::MsgMovieThemeExternal* MsgS2CMovieThemesACK::add_infos() {
  // @@protoc_insertion_point(field_add:message.MsgS2CMovieThemesACK.infos)
  return infos_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::message::MsgMovieThemeExternal >&
MsgS2CMovieThemesACK::infos() const {
  // @@protoc_insertion_point(field_list:message.MsgS2CMovieThemesACK.infos)
  return infos_;
}
 ::google::protobuf::RepeatedPtrField< ::message::MsgMovieThemeExternal >*
MsgS2CMovieThemesACK::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:message.MsgS2CMovieThemesACK.infos)
  return &infos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MsgS2CClientInit::kWatchRecordFieldNumber;
const int MsgS2CClientInit::kVipFieldNumber;
const int MsgS2CClientInit::kResourcePathFieldNumber;
const int MsgS2CClientInit::kConfigPicPathFieldNumber;
const int MsgS2CClientInit::kConfigVideoPathFieldNumber;
const int MsgS2CClientInit::kGirdThemeFieldNumber;
const int MsgS2CClientInit::kNameFieldNumber;
#endif  // !_MSC_VER

MsgS2CClientInit::MsgS2CClientInit()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.MsgS2CClientInit)
}

void MsgS2CClientInit::InitAsDefaultInstance() {
}

MsgS2CClientInit::MsgS2CClientInit(const MsgS2CClientInit& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.MsgS2CClientInit)
}

void MsgS2CClientInit::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  vip_ = 0;
  resource_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_pic_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_video_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgS2CClientInit::~MsgS2CClientInit() {
  // @@protoc_insertion_point(destructor:message.MsgS2CClientInit)
  SharedDtor();
}

void MsgS2CClientInit::SharedDtor() {
  resource_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_pic_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_video_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MsgS2CClientInit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgS2CClientInit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgS2CClientInit_descriptor_;
}

const MsgS2CClientInit& MsgS2CClientInit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BodhiTV_2eproto();
  return *default_instance_;
}

MsgS2CClientInit* MsgS2CClientInit::default_instance_ = NULL;

MsgS2CClientInit* MsgS2CClientInit::New(::google::protobuf::Arena* arena) const {
  MsgS2CClientInit* n = new MsgS2CClientInit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgS2CClientInit::Clear() {
  if (_has_bits_[0 / 32] & 94) {
    vip_ = 0;
    if (has_resource_path()) {
      resource_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_config_pic_path()) {
      config_pic_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_config_video_path()) {
      config_video_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  watch_record_.Clear();
  gird_theme_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgS2CClientInit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.MsgS2CClientInit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .message.MsgWatchRecordInfo watch_record = 1;
      case 1: {
        if (tag == 10) {
         parse_watch_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_watch_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_watch_record;
        if (input->ExpectTag(16)) goto parse_vip;
        break;
      }

      // required int32 vip = 2;
      case 2: {
        if (tag == 16) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_resource_path;
        break;
      }

      // required string resource_path = 3;
      case 3: {
        if (tag == 26) {
         parse_resource_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resource_path().data(), this->resource_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message.MsgS2CClientInit.resource_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_config_pic_path;
        break;
      }

      // required string config_pic_path = 4;
      case 4: {
        if (tag == 34) {
         parse_config_pic_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config_pic_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->config_pic_path().data(), this->config_pic_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message.MsgS2CClientInit.config_pic_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_config_video_path;
        break;
      }

      // required string config_video_path = 5;
      case 5: {
        if (tag == 42) {
         parse_config_video_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config_video_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->config_video_path().data(), this->config_video_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message.MsgS2CClientInit.config_video_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_gird_theme;
        break;
      }

      // repeated .message.MsgIntPair gird_theme = 6;
      case 6: {
        if (tag == 50) {
         parse_gird_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gird_theme()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_gird_theme;
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // required string name = 7;
      case 7: {
        if (tag == 58) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message.MsgS2CClientInit.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.MsgS2CClientInit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.MsgS2CClientInit)
  return false;
#undef DO_
}

void MsgS2CClientInit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.MsgS2CClientInit)
  // repeated .message.MsgWatchRecordInfo watch_record = 1;
  for (unsigned int i = 0, n = this->watch_record_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->watch_record(i), output);
  }

  // required int32 vip = 2;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vip(), output);
  }

  // required string resource_path = 3;
  if (has_resource_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resource_path().data(), this->resource_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.MsgS2CClientInit.resource_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->resource_path(), output);
  }

  // required string config_pic_path = 4;
  if (has_config_pic_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config_pic_path().data(), this->config_pic_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.MsgS2CClientInit.config_pic_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->config_pic_path(), output);
  }

  // required string config_video_path = 5;
  if (has_config_video_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config_video_path().data(), this->config_video_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.MsgS2CClientInit.config_video_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->config_video_path(), output);
  }

  // repeated .message.MsgIntPair gird_theme = 6;
  for (unsigned int i = 0, n = this->gird_theme_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->gird_theme(i), output);
  }

  // required string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.MsgS2CClientInit.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.MsgS2CClientInit)
}

::google::protobuf::uint8* MsgS2CClientInit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MsgS2CClientInit)
  // repeated .message.MsgWatchRecordInfo watch_record = 1;
  for (unsigned int i = 0, n = this->watch_record_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->watch_record(i), target);
  }

  // required int32 vip = 2;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vip(), target);
  }

  // required string resource_path = 3;
  if (has_resource_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resource_path().data(), this->resource_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.MsgS2CClientInit.resource_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->resource_path(), target);
  }

  // required string config_pic_path = 4;
  if (has_config_pic_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config_pic_path().data(), this->config_pic_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.MsgS2CClientInit.config_pic_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->config_pic_path(), target);
  }

  // required string config_video_path = 5;
  if (has_config_video_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config_video_path().data(), this->config_video_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.MsgS2CClientInit.config_video_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->config_video_path(), target);
  }

  // repeated .message.MsgIntPair gird_theme = 6;
  for (unsigned int i = 0, n = this->gird_theme_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->gird_theme(i), target);
  }

  // required string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.MsgS2CClientInit.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MsgS2CClientInit)
  return target;
}

int MsgS2CClientInit::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_vip()) {
    // required int32 vip = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vip());
  }

  if (has_resource_path()) {
    // required string resource_path = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resource_path());
  }

  if (has_config_pic_path()) {
    // required string config_pic_path = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->config_pic_path());
  }

  if (has_config_video_path()) {
    // required string config_video_path = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->config_video_path());
  }

  if (has_name()) {
    // required string name = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  return total_size;
}
int MsgS2CClientInit::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000005e) ^ 0x0000005e) == 0) {  // All required fields are present.
    // required int32 vip = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vip());

    // required string resource_path = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resource_path());

    // required string config_pic_path = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->config_pic_path());

    // required string config_video_path = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->config_video_path());

    // required string name = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .message.MsgWatchRecordInfo watch_record = 1;
  total_size += 1 * this->watch_record_size();
  for (int i = 0; i < this->watch_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->watch_record(i));
  }

  // repeated .message.MsgIntPair gird_theme = 6;
  total_size += 1 * this->gird_theme_size();
  for (int i = 0; i < this->gird_theme_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gird_theme(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgS2CClientInit::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgS2CClientInit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgS2CClientInit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgS2CClientInit::MergeFrom(const MsgS2CClientInit& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  watch_record_.MergeFrom(from.watch_record_);
  gird_theme_.MergeFrom(from.gird_theme_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_resource_path()) {
      set_has_resource_path();
      resource_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resource_path_);
    }
    if (from.has_config_pic_path()) {
      set_has_config_pic_path();
      config_pic_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_pic_path_);
    }
    if (from.has_config_video_path()) {
      set_has_config_video_path();
      config_video_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_video_path_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgS2CClientInit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgS2CClientInit::CopyFrom(const MsgS2CClientInit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgS2CClientInit::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000005e) != 0x0000005e) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->watch_record())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->gird_theme())) return false;
  return true;
}

void MsgS2CClientInit::Swap(MsgS2CClientInit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgS2CClientInit::InternalSwap(MsgS2CClientInit* other) {
  watch_record_.UnsafeArenaSwap(&other->watch_record_);
  std::swap(vip_, other->vip_);
  resource_path_.Swap(&other->resource_path_);
  config_pic_path_.Swap(&other->config_pic_path_);
  config_video_path_.Swap(&other->config_video_path_);
  gird_theme_.UnsafeArenaSwap(&other->gird_theme_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgS2CClientInit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgS2CClientInit_descriptor_;
  metadata.reflection = MsgS2CClientInit_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgS2CClientInit

// repeated .message.MsgWatchRecordInfo watch_record = 1;
 int MsgS2CClientInit::watch_record_size() const {
  return watch_record_.size();
}
 void MsgS2CClientInit::clear_watch_record() {
  watch_record_.Clear();
}
 const ::message::MsgWatchRecordInfo& MsgS2CClientInit::watch_record(int index) const {
  // @@protoc_insertion_point(field_get:message.MsgS2CClientInit.watch_record)
  return watch_record_.Get(index);
}
 ::message::MsgWatchRecordInfo* MsgS2CClientInit::mutable_watch_record(int index) {
  // @@protoc_insertion_point(field_mutable:message.MsgS2CClientInit.watch_record)
  return watch_record_.Mutable(index);
}
 ::message::MsgWatchRecordInfo* MsgS2CClientInit::add_watch_record() {
  // @@protoc_insertion_point(field_add:message.MsgS2CClientInit.watch_record)
  return watch_record_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::message::MsgWatchRecordInfo >&
MsgS2CClientInit::watch_record() const {
  // @@protoc_insertion_point(field_list:message.MsgS2CClientInit.watch_record)
  return watch_record_;
}
 ::google::protobuf::RepeatedPtrField< ::message::MsgWatchRecordInfo >*
MsgS2CClientInit::mutable_watch_record() {
  // @@protoc_insertion_point(field_mutable_list:message.MsgS2CClientInit.watch_record)
  return &watch_record_;
}

// required int32 vip = 2;
 bool MsgS2CClientInit::has_vip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void MsgS2CClientInit::set_has_vip() {
  _has_bits_[0] |= 0x00000002u;
}
 void MsgS2CClientInit::clear_has_vip() {
  _has_bits_[0] &= ~0x00000002u;
}
 void MsgS2CClientInit::clear_vip() {
  vip_ = 0;
  clear_has_vip();
}
 ::google::protobuf::int32 MsgS2CClientInit::vip() const {
  // @@protoc_insertion_point(field_get:message.MsgS2CClientInit.vip)
  return vip_;
}
 void MsgS2CClientInit::set_vip(::google::protobuf::int32 value) {
  set_has_vip();
  vip_ = value;
  // @@protoc_insertion_point(field_set:message.MsgS2CClientInit.vip)
}

// required string resource_path = 3;
 bool MsgS2CClientInit::has_resource_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void MsgS2CClientInit::set_has_resource_path() {
  _has_bits_[0] |= 0x00000004u;
}
 void MsgS2CClientInit::clear_has_resource_path() {
  _has_bits_[0] &= ~0x00000004u;
}
 void MsgS2CClientInit::clear_resource_path() {
  resource_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_resource_path();
}
 const ::std::string& MsgS2CClientInit::resource_path() const {
  // @@protoc_insertion_point(field_get:message.MsgS2CClientInit.resource_path)
  return resource_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgS2CClientInit::set_resource_path(const ::std::string& value) {
  set_has_resource_path();
  resource_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.MsgS2CClientInit.resource_path)
}
 void MsgS2CClientInit::set_resource_path(const char* value) {
  set_has_resource_path();
  resource_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.MsgS2CClientInit.resource_path)
}
 void MsgS2CClientInit::set_resource_path(const char* value, size_t size) {
  set_has_resource_path();
  resource_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.MsgS2CClientInit.resource_path)
}
 ::std::string* MsgS2CClientInit::mutable_resource_path() {
  set_has_resource_path();
  // @@protoc_insertion_point(field_mutable:message.MsgS2CClientInit.resource_path)
  return resource_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgS2CClientInit::release_resource_path() {
  clear_has_resource_path();
  return resource_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgS2CClientInit::set_allocated_resource_path(::std::string* resource_path) {
  if (resource_path != NULL) {
    set_has_resource_path();
  } else {
    clear_has_resource_path();
  }
  resource_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource_path);
  // @@protoc_insertion_point(field_set_allocated:message.MsgS2CClientInit.resource_path)
}

// required string config_pic_path = 4;
 bool MsgS2CClientInit::has_config_pic_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void MsgS2CClientInit::set_has_config_pic_path() {
  _has_bits_[0] |= 0x00000008u;
}
 void MsgS2CClientInit::clear_has_config_pic_path() {
  _has_bits_[0] &= ~0x00000008u;
}
 void MsgS2CClientInit::clear_config_pic_path() {
  config_pic_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_config_pic_path();
}
 const ::std::string& MsgS2CClientInit::config_pic_path() const {
  // @@protoc_insertion_point(field_get:message.MsgS2CClientInit.config_pic_path)
  return config_pic_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgS2CClientInit::set_config_pic_path(const ::std::string& value) {
  set_has_config_pic_path();
  config_pic_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.MsgS2CClientInit.config_pic_path)
}
 void MsgS2CClientInit::set_config_pic_path(const char* value) {
  set_has_config_pic_path();
  config_pic_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.MsgS2CClientInit.config_pic_path)
}
 void MsgS2CClientInit::set_config_pic_path(const char* value, size_t size) {
  set_has_config_pic_path();
  config_pic_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.MsgS2CClientInit.config_pic_path)
}
 ::std::string* MsgS2CClientInit::mutable_config_pic_path() {
  set_has_config_pic_path();
  // @@protoc_insertion_point(field_mutable:message.MsgS2CClientInit.config_pic_path)
  return config_pic_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgS2CClientInit::release_config_pic_path() {
  clear_has_config_pic_path();
  return config_pic_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgS2CClientInit::set_allocated_config_pic_path(::std::string* config_pic_path) {
  if (config_pic_path != NULL) {
    set_has_config_pic_path();
  } else {
    clear_has_config_pic_path();
  }
  config_pic_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config_pic_path);
  // @@protoc_insertion_point(field_set_allocated:message.MsgS2CClientInit.config_pic_path)
}

// required string config_video_path = 5;
 bool MsgS2CClientInit::has_config_video_path() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void MsgS2CClientInit::set_has_config_video_path() {
  _has_bits_[0] |= 0x00000010u;
}
 void MsgS2CClientInit::clear_has_config_video_path() {
  _has_bits_[0] &= ~0x00000010u;
}
 void MsgS2CClientInit::clear_config_video_path() {
  config_video_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_config_video_path();
}
 const ::std::string& MsgS2CClientInit::config_video_path() const {
  // @@protoc_insertion_point(field_get:message.MsgS2CClientInit.config_video_path)
  return config_video_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgS2CClientInit::set_config_video_path(const ::std::string& value) {
  set_has_config_video_path();
  config_video_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.MsgS2CClientInit.config_video_path)
}
 void MsgS2CClientInit::set_config_video_path(const char* value) {
  set_has_config_video_path();
  config_video_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.MsgS2CClientInit.config_video_path)
}
 void MsgS2CClientInit::set_config_video_path(const char* value, size_t size) {
  set_has_config_video_path();
  config_video_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.MsgS2CClientInit.config_video_path)
}
 ::std::string* MsgS2CClientInit::mutable_config_video_path() {
  set_has_config_video_path();
  // @@protoc_insertion_point(field_mutable:message.MsgS2CClientInit.config_video_path)
  return config_video_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgS2CClientInit::release_config_video_path() {
  clear_has_config_video_path();
  return config_video_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgS2CClientInit::set_allocated_config_video_path(::std::string* config_video_path) {
  if (config_video_path != NULL) {
    set_has_config_video_path();
  } else {
    clear_has_config_video_path();
  }
  config_video_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config_video_path);
  // @@protoc_insertion_point(field_set_allocated:message.MsgS2CClientInit.config_video_path)
}

// repeated .message.MsgIntPair gird_theme = 6;
 int MsgS2CClientInit::gird_theme_size() const {
  return gird_theme_.size();
}
 void MsgS2CClientInit::clear_gird_theme() {
  gird_theme_.Clear();
}
 const ::message::MsgIntPair& MsgS2CClientInit::gird_theme(int index) const {
  // @@protoc_insertion_point(field_get:message.MsgS2CClientInit.gird_theme)
  return gird_theme_.Get(index);
}
 ::message::MsgIntPair* MsgS2CClientInit::mutable_gird_theme(int index) {
  // @@protoc_insertion_point(field_mutable:message.MsgS2CClientInit.gird_theme)
  return gird_theme_.Mutable(index);
}
 ::message::MsgIntPair* MsgS2CClientInit::add_gird_theme() {
  // @@protoc_insertion_point(field_add:message.MsgS2CClientInit.gird_theme)
  return gird_theme_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::message::MsgIntPair >&
MsgS2CClientInit::gird_theme() const {
  // @@protoc_insertion_point(field_list:message.MsgS2CClientInit.gird_theme)
  return gird_theme_;
}
 ::google::protobuf::RepeatedPtrField< ::message::MsgIntPair >*
MsgS2CClientInit::mutable_gird_theme() {
  // @@protoc_insertion_point(field_mutable_list:message.MsgS2CClientInit.gird_theme)
  return &gird_theme_;
}

// required string name = 7;
 bool MsgS2CClientInit::has_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void MsgS2CClientInit::set_has_name() {
  _has_bits_[0] |= 0x00000040u;
}
 void MsgS2CClientInit::clear_has_name() {
  _has_bits_[0] &= ~0x00000040u;
}
 void MsgS2CClientInit::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& MsgS2CClientInit::name() const {
  // @@protoc_insertion_point(field_get:message.MsgS2CClientInit.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgS2CClientInit::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.MsgS2CClientInit.name)
}
 void MsgS2CClientInit::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.MsgS2CClientInit.name)
}
 void MsgS2CClientInit::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.MsgS2CClientInit.name)
}
 ::std::string* MsgS2CClientInit::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:message.MsgS2CClientInit.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgS2CClientInit::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgS2CClientInit::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:message.MsgS2CClientInit.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MsgC2SReqThemeInfo::kThemeIdFieldNumber;
#endif  // !_MSC_VER

MsgC2SReqThemeInfo::MsgC2SReqThemeInfo()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.MsgC2SReqThemeInfo)
}

void MsgC2SReqThemeInfo::InitAsDefaultInstance() {
}

MsgC2SReqThemeInfo::MsgC2SReqThemeInfo(const MsgC2SReqThemeInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.MsgC2SReqThemeInfo)
}

void MsgC2SReqThemeInfo::SharedCtor() {
  _cached_size_ = 0;
  theme_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgC2SReqThemeInfo::~MsgC2SReqThemeInfo() {
  // @@protoc_insertion_point(destructor:message.MsgC2SReqThemeInfo)
  SharedDtor();
}

void MsgC2SReqThemeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgC2SReqThemeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgC2SReqThemeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgC2SReqThemeInfo_descriptor_;
}

const MsgC2SReqThemeInfo& MsgC2SReqThemeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BodhiTV_2eproto();
  return *default_instance_;
}

MsgC2SReqThemeInfo* MsgC2SReqThemeInfo::default_instance_ = NULL;

MsgC2SReqThemeInfo* MsgC2SReqThemeInfo::New(::google::protobuf::Arena* arena) const {
  MsgC2SReqThemeInfo* n = new MsgC2SReqThemeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgC2SReqThemeInfo::Clear() {
  theme_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgC2SReqThemeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.MsgC2SReqThemeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 Theme_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &theme_id_)));
          set_has_theme_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.MsgC2SReqThemeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.MsgC2SReqThemeInfo)
  return false;
#undef DO_
}

void MsgC2SReqThemeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.MsgC2SReqThemeInfo)
  // required int64 Theme_id = 1;
  if (has_theme_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->theme_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.MsgC2SReqThemeInfo)
}

::google::protobuf::uint8* MsgC2SReqThemeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MsgC2SReqThemeInfo)
  // required int64 Theme_id = 1;
  if (has_theme_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->theme_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MsgC2SReqThemeInfo)
  return target;
}

int MsgC2SReqThemeInfo::ByteSize() const {
  int total_size = 0;

  // required int64 Theme_id = 1;
  if (has_theme_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->theme_id());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgC2SReqThemeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgC2SReqThemeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgC2SReqThemeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgC2SReqThemeInfo::MergeFrom(const MsgC2SReqThemeInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_theme_id()) {
      set_theme_id(from.theme_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgC2SReqThemeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgC2SReqThemeInfo::CopyFrom(const MsgC2SReqThemeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgC2SReqThemeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgC2SReqThemeInfo::Swap(MsgC2SReqThemeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgC2SReqThemeInfo::InternalSwap(MsgC2SReqThemeInfo* other) {
  std::swap(theme_id_, other->theme_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgC2SReqThemeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgC2SReqThemeInfo_descriptor_;
  metadata.reflection = MsgC2SReqThemeInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgC2SReqThemeInfo

// required int64 Theme_id = 1;
 bool MsgC2SReqThemeInfo::has_theme_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void MsgC2SReqThemeInfo::set_has_theme_id() {
  _has_bits_[0] |= 0x00000001u;
}
 void MsgC2SReqThemeInfo::clear_has_theme_id() {
  _has_bits_[0] &= ~0x00000001u;
}
 void MsgC2SReqThemeInfo::clear_theme_id() {
  theme_id_ = GOOGLE_LONGLONG(0);
  clear_has_theme_id();
}
 ::google::protobuf::int64 MsgC2SReqThemeInfo::theme_id() const {
  // @@protoc_insertion_point(field_get:message.MsgC2SReqThemeInfo.Theme_id)
  return theme_id_;
}
 void MsgC2SReqThemeInfo::set_theme_id(::google::protobuf::int64 value) {
  set_has_theme_id();
  theme_id_ = value;
  // @@protoc_insertion_point(field_set:message.MsgC2SReqThemeInfo.Theme_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MsgS2CThemeInfoACK::kInfoFieldNumber;
#endif  // !_MSC_VER

MsgS2CThemeInfoACK::MsgS2CThemeInfoACK()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.MsgS2CThemeInfoACK)
}

void MsgS2CThemeInfoACK::InitAsDefaultInstance() {
  info_ = const_cast< ::message::MsgMovieTheme*>(&::message::MsgMovieTheme::default_instance());
}

MsgS2CThemeInfoACK::MsgS2CThemeInfoACK(const MsgS2CThemeInfoACK& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.MsgS2CThemeInfoACK)
}

void MsgS2CThemeInfoACK::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgS2CThemeInfoACK::~MsgS2CThemeInfoACK() {
  // @@protoc_insertion_point(destructor:message.MsgS2CThemeInfoACK)
  SharedDtor();
}

void MsgS2CThemeInfoACK::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void MsgS2CThemeInfoACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgS2CThemeInfoACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgS2CThemeInfoACK_descriptor_;
}

const MsgS2CThemeInfoACK& MsgS2CThemeInfoACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BodhiTV_2eproto();
  return *default_instance_;
}

MsgS2CThemeInfoACK* MsgS2CThemeInfoACK::default_instance_ = NULL;

MsgS2CThemeInfoACK* MsgS2CThemeInfoACK::New(::google::protobuf::Arena* arena) const {
  MsgS2CThemeInfoACK* n = new MsgS2CThemeInfoACK;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgS2CThemeInfoACK::Clear() {
  if (has_info()) {
    if (info_ != NULL) info_->::message::MsgMovieTheme::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgS2CThemeInfoACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.MsgS2CThemeInfoACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .message.MsgMovieTheme info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.MsgS2CThemeInfoACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.MsgS2CThemeInfoACK)
  return false;
#undef DO_
}

void MsgS2CThemeInfoACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.MsgS2CThemeInfoACK)
  // required .message.MsgMovieTheme info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.MsgS2CThemeInfoACK)
}

::google::protobuf::uint8* MsgS2CThemeInfoACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MsgS2CThemeInfoACK)
  // required .message.MsgMovieTheme info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->info_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MsgS2CThemeInfoACK)
  return target;
}

int MsgS2CThemeInfoACK::ByteSize() const {
  int total_size = 0;

  // required .message.MsgMovieTheme info = 1;
  if (has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgS2CThemeInfoACK::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgS2CThemeInfoACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgS2CThemeInfoACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgS2CThemeInfoACK::MergeFrom(const MsgS2CThemeInfoACK& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::message::MsgMovieTheme::MergeFrom(from.info());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgS2CThemeInfoACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgS2CThemeInfoACK::CopyFrom(const MsgS2CThemeInfoACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgS2CThemeInfoACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info_->IsInitialized()) return false;
  }
  return true;
}

void MsgS2CThemeInfoACK::Swap(MsgS2CThemeInfoACK* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgS2CThemeInfoACK::InternalSwap(MsgS2CThemeInfoACK* other) {
  std::swap(info_, other->info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgS2CThemeInfoACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgS2CThemeInfoACK_descriptor_;
  metadata.reflection = MsgS2CThemeInfoACK_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgS2CThemeInfoACK

// required .message.MsgMovieTheme info = 1;
 bool MsgS2CThemeInfoACK::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void MsgS2CThemeInfoACK::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
 void MsgS2CThemeInfoACK::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
 void MsgS2CThemeInfoACK::clear_info() {
  if (info_ != NULL) info_->::message::MsgMovieTheme::Clear();
  clear_has_info();
}
 const ::message::MsgMovieTheme& MsgS2CThemeInfoACK::info() const {
  // @@protoc_insertion_point(field_get:message.MsgS2CThemeInfoACK.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
 ::message::MsgMovieTheme* MsgS2CThemeInfoACK::mutable_info() {
  set_has_info();
  if (info_ == NULL) {
    info_ = new ::message::MsgMovieTheme;
  }
  // @@protoc_insertion_point(field_mutable:message.MsgS2CThemeInfoACK.info)
  return info_;
}
 ::message::MsgMovieTheme* MsgS2CThemeInfoACK::release_info() {
  clear_has_info();
  ::message::MsgMovieTheme* temp = info_;
  info_ = NULL;
  return temp;
}
 void MsgS2CThemeInfoACK::set_allocated_info(::message::MsgMovieTheme* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:message.MsgS2CThemeInfoACK.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MsgC2SReqMovieInfo::kMovieIdFieldNumber;
#endif  // !_MSC_VER

MsgC2SReqMovieInfo::MsgC2SReqMovieInfo()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.MsgC2SReqMovieInfo)
}

void MsgC2SReqMovieInfo::InitAsDefaultInstance() {
}

MsgC2SReqMovieInfo::MsgC2SReqMovieInfo(const MsgC2SReqMovieInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.MsgC2SReqMovieInfo)
}

void MsgC2SReqMovieInfo::SharedCtor() {
  _cached_size_ = 0;
  movie_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgC2SReqMovieInfo::~MsgC2SReqMovieInfo() {
  // @@protoc_insertion_point(destructor:message.MsgC2SReqMovieInfo)
  SharedDtor();
}

void MsgC2SReqMovieInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgC2SReqMovieInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgC2SReqMovieInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgC2SReqMovieInfo_descriptor_;
}

const MsgC2SReqMovieInfo& MsgC2SReqMovieInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BodhiTV_2eproto();
  return *default_instance_;
}

MsgC2SReqMovieInfo* MsgC2SReqMovieInfo::default_instance_ = NULL;

MsgC2SReqMovieInfo* MsgC2SReqMovieInfo::New(::google::protobuf::Arena* arena) const {
  MsgC2SReqMovieInfo* n = new MsgC2SReqMovieInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgC2SReqMovieInfo::Clear() {
  movie_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgC2SReqMovieInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.MsgC2SReqMovieInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 movie_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &movie_id_)));
          set_has_movie_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.MsgC2SReqMovieInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.MsgC2SReqMovieInfo)
  return false;
#undef DO_
}

void MsgC2SReqMovieInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.MsgC2SReqMovieInfo)
  // required int64 movie_id = 1;
  if (has_movie_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->movie_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.MsgC2SReqMovieInfo)
}

::google::protobuf::uint8* MsgC2SReqMovieInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MsgC2SReqMovieInfo)
  // required int64 movie_id = 1;
  if (has_movie_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->movie_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MsgC2SReqMovieInfo)
  return target;
}

int MsgC2SReqMovieInfo::ByteSize() const {
  int total_size = 0;

  // required int64 movie_id = 1;
  if (has_movie_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->movie_id());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgC2SReqMovieInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgC2SReqMovieInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgC2SReqMovieInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgC2SReqMovieInfo::MergeFrom(const MsgC2SReqMovieInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_movie_id()) {
      set_movie_id(from.movie_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgC2SReqMovieInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgC2SReqMovieInfo::CopyFrom(const MsgC2SReqMovieInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgC2SReqMovieInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgC2SReqMovieInfo::Swap(MsgC2SReqMovieInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgC2SReqMovieInfo::InternalSwap(MsgC2SReqMovieInfo* other) {
  std::swap(movie_id_, other->movie_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgC2SReqMovieInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgC2SReqMovieInfo_descriptor_;
  metadata.reflection = MsgC2SReqMovieInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgC2SReqMovieInfo

// required int64 movie_id = 1;
 bool MsgC2SReqMovieInfo::has_movie_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void MsgC2SReqMovieInfo::set_has_movie_id() {
  _has_bits_[0] |= 0x00000001u;
}
 void MsgC2SReqMovieInfo::clear_has_movie_id() {
  _has_bits_[0] &= ~0x00000001u;
}
 void MsgC2SReqMovieInfo::clear_movie_id() {
  movie_id_ = GOOGLE_LONGLONG(0);
  clear_has_movie_id();
}
 ::google::protobuf::int64 MsgC2SReqMovieInfo::movie_id() const {
  // @@protoc_insertion_point(field_get:message.MsgC2SReqMovieInfo.movie_id)
  return movie_id_;
}
 void MsgC2SReqMovieInfo::set_movie_id(::google::protobuf::int64 value) {
  set_has_movie_id();
  movie_id_ = value;
  // @@protoc_insertion_point(field_set:message.MsgC2SReqMovieInfo.movie_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MsgS2CMovieInfoACK::kInfoFieldNumber;
#endif  // !_MSC_VER

MsgS2CMovieInfoACK::MsgS2CMovieInfoACK()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.MsgS2CMovieInfoACK)
}

void MsgS2CMovieInfoACK::InitAsDefaultInstance() {
  info_ = const_cast< ::message::MsgMovie*>(&::message::MsgMovie::default_instance());
}

MsgS2CMovieInfoACK::MsgS2CMovieInfoACK(const MsgS2CMovieInfoACK& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.MsgS2CMovieInfoACK)
}

void MsgS2CMovieInfoACK::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgS2CMovieInfoACK::~MsgS2CMovieInfoACK() {
  // @@protoc_insertion_point(destructor:message.MsgS2CMovieInfoACK)
  SharedDtor();
}

void MsgS2CMovieInfoACK::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void MsgS2CMovieInfoACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgS2CMovieInfoACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgS2CMovieInfoACK_descriptor_;
}

const MsgS2CMovieInfoACK& MsgS2CMovieInfoACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BodhiTV_2eproto();
  return *default_instance_;
}

MsgS2CMovieInfoACK* MsgS2CMovieInfoACK::default_instance_ = NULL;

MsgS2CMovieInfoACK* MsgS2CMovieInfoACK::New(::google::protobuf::Arena* arena) const {
  MsgS2CMovieInfoACK* n = new MsgS2CMovieInfoACK;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgS2CMovieInfoACK::Clear() {
  if (has_info()) {
    if (info_ != NULL) info_->::message::MsgMovie::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgS2CMovieInfoACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.MsgS2CMovieInfoACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .message.MsgMovie info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.MsgS2CMovieInfoACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.MsgS2CMovieInfoACK)
  return false;
#undef DO_
}

void MsgS2CMovieInfoACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.MsgS2CMovieInfoACK)
  // required .message.MsgMovie info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.MsgS2CMovieInfoACK)
}

::google::protobuf::uint8* MsgS2CMovieInfoACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MsgS2CMovieInfoACK)
  // required .message.MsgMovie info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->info_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MsgS2CMovieInfoACK)
  return target;
}

int MsgS2CMovieInfoACK::ByteSize() const {
  int total_size = 0;

  // required .message.MsgMovie info = 1;
  if (has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgS2CMovieInfoACK::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgS2CMovieInfoACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgS2CMovieInfoACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgS2CMovieInfoACK::MergeFrom(const MsgS2CMovieInfoACK& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::message::MsgMovie::MergeFrom(from.info());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgS2CMovieInfoACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgS2CMovieInfoACK::CopyFrom(const MsgS2CMovieInfoACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgS2CMovieInfoACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info_->IsInitialized()) return false;
  }
  return true;
}

void MsgS2CMovieInfoACK::Swap(MsgS2CMovieInfoACK* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgS2CMovieInfoACK::InternalSwap(MsgS2CMovieInfoACK* other) {
  std::swap(info_, other->info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgS2CMovieInfoACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgS2CMovieInfoACK_descriptor_;
  metadata.reflection = MsgS2CMovieInfoACK_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgS2CMovieInfoACK

// required .message.MsgMovie info = 1;
 bool MsgS2CMovieInfoACK::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void MsgS2CMovieInfoACK::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
 void MsgS2CMovieInfoACK::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
 void MsgS2CMovieInfoACK::clear_info() {
  if (info_ != NULL) info_->::message::MsgMovie::Clear();
  clear_has_info();
}
 const ::message::MsgMovie& MsgS2CMovieInfoACK::info() const {
  // @@protoc_insertion_point(field_get:message.MsgS2CMovieInfoACK.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
 ::message::MsgMovie* MsgS2CMovieInfoACK::mutable_info() {
  set_has_info();
  if (info_ == NULL) {
    info_ = new ::message::MsgMovie;
  }
  // @@protoc_insertion_point(field_mutable:message.MsgS2CMovieInfoACK.info)
  return info_;
}
 ::message::MsgMovie* MsgS2CMovieInfoACK::release_info() {
  clear_has_info();
  ::message::MsgMovie* temp = info_;
  info_ = NULL;
  return temp;
}
 void MsgS2CMovieInfoACK::set_allocated_info(::message::MsgMovie* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:message.MsgS2CMovieInfoACK.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MsgC2SReqPlayVideo::kMovieIdFieldNumber;
const int MsgC2SReqPlayVideo::kVideoIdFieldNumber;
#endif  // !_MSC_VER

MsgC2SReqPlayVideo::MsgC2SReqPlayVideo()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.MsgC2SReqPlayVideo)
}

void MsgC2SReqPlayVideo::InitAsDefaultInstance() {
}

MsgC2SReqPlayVideo::MsgC2SReqPlayVideo(const MsgC2SReqPlayVideo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.MsgC2SReqPlayVideo)
}

void MsgC2SReqPlayVideo::SharedCtor() {
  _cached_size_ = 0;
  movie_id_ = GOOGLE_LONGLONG(0);
  video_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgC2SReqPlayVideo::~MsgC2SReqPlayVideo() {
  // @@protoc_insertion_point(destructor:message.MsgC2SReqPlayVideo)
  SharedDtor();
}

void MsgC2SReqPlayVideo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgC2SReqPlayVideo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgC2SReqPlayVideo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgC2SReqPlayVideo_descriptor_;
}

const MsgC2SReqPlayVideo& MsgC2SReqPlayVideo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BodhiTV_2eproto();
  return *default_instance_;
}

MsgC2SReqPlayVideo* MsgC2SReqPlayVideo::default_instance_ = NULL;

MsgC2SReqPlayVideo* MsgC2SReqPlayVideo::New(::google::protobuf::Arena* arena) const {
  MsgC2SReqPlayVideo* n = new MsgC2SReqPlayVideo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgC2SReqPlayVideo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgC2SReqPlayVideo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(movie_id_, video_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgC2SReqPlayVideo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.MsgC2SReqPlayVideo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 movie_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &movie_id_)));
          set_has_movie_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_video_id;
        break;
      }

      // required int64 video_id = 2;
      case 2: {
        if (tag == 16) {
         parse_video_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &video_id_)));
          set_has_video_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.MsgC2SReqPlayVideo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.MsgC2SReqPlayVideo)
  return false;
#undef DO_
}

void MsgC2SReqPlayVideo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.MsgC2SReqPlayVideo)
  // required int64 movie_id = 1;
  if (has_movie_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->movie_id(), output);
  }

  // required int64 video_id = 2;
  if (has_video_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->video_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.MsgC2SReqPlayVideo)
}

::google::protobuf::uint8* MsgC2SReqPlayVideo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MsgC2SReqPlayVideo)
  // required int64 movie_id = 1;
  if (has_movie_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->movie_id(), target);
  }

  // required int64 video_id = 2;
  if (has_video_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->video_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MsgC2SReqPlayVideo)
  return target;
}

int MsgC2SReqPlayVideo::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_movie_id()) {
    // required int64 movie_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->movie_id());
  }

  if (has_video_id()) {
    // required int64 video_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->video_id());
  }

  return total_size;
}
int MsgC2SReqPlayVideo::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 movie_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->movie_id());

    // required int64 video_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->video_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgC2SReqPlayVideo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgC2SReqPlayVideo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgC2SReqPlayVideo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgC2SReqPlayVideo::MergeFrom(const MsgC2SReqPlayVideo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_movie_id()) {
      set_movie_id(from.movie_id());
    }
    if (from.has_video_id()) {
      set_video_id(from.video_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgC2SReqPlayVideo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgC2SReqPlayVideo::CopyFrom(const MsgC2SReqPlayVideo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgC2SReqPlayVideo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgC2SReqPlayVideo::Swap(MsgC2SReqPlayVideo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgC2SReqPlayVideo::InternalSwap(MsgC2SReqPlayVideo* other) {
  std::swap(movie_id_, other->movie_id_);
  std::swap(video_id_, other->video_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgC2SReqPlayVideo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgC2SReqPlayVideo_descriptor_;
  metadata.reflection = MsgC2SReqPlayVideo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgC2SReqPlayVideo

// required int64 movie_id = 1;
 bool MsgC2SReqPlayVideo::has_movie_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void MsgC2SReqPlayVideo::set_has_movie_id() {
  _has_bits_[0] |= 0x00000001u;
}
 void MsgC2SReqPlayVideo::clear_has_movie_id() {
  _has_bits_[0] &= ~0x00000001u;
}
 void MsgC2SReqPlayVideo::clear_movie_id() {
  movie_id_ = GOOGLE_LONGLONG(0);
  clear_has_movie_id();
}
 ::google::protobuf::int64 MsgC2SReqPlayVideo::movie_id() const {
  // @@protoc_insertion_point(field_get:message.MsgC2SReqPlayVideo.movie_id)
  return movie_id_;
}
 void MsgC2SReqPlayVideo::set_movie_id(::google::protobuf::int64 value) {
  set_has_movie_id();
  movie_id_ = value;
  // @@protoc_insertion_point(field_set:message.MsgC2SReqPlayVideo.movie_id)
}

// required int64 video_id = 2;
 bool MsgC2SReqPlayVideo::has_video_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void MsgC2SReqPlayVideo::set_has_video_id() {
  _has_bits_[0] |= 0x00000002u;
}
 void MsgC2SReqPlayVideo::clear_has_video_id() {
  _has_bits_[0] &= ~0x00000002u;
}
 void MsgC2SReqPlayVideo::clear_video_id() {
  video_id_ = GOOGLE_LONGLONG(0);
  clear_has_video_id();
}
 ::google::protobuf::int64 MsgC2SReqPlayVideo::video_id() const {
  // @@protoc_insertion_point(field_get:message.MsgC2SReqPlayVideo.video_id)
  return video_id_;
}
 void MsgC2SReqPlayVideo::set_video_id(::google::protobuf::int64 value) {
  set_has_video_id();
  video_id_ = value;
  // @@protoc_insertion_point(field_set:message.MsgC2SReqPlayVideo.video_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MsgC2SPlayVideoACK::kMovieIdFieldNumber;
const int MsgC2SPlayVideoACK::kVideoIdFieldNumber;
const int MsgC2SPlayVideoACK::kErrorFieldNumber;
#endif  // !_MSC_VER

MsgC2SPlayVideoACK::MsgC2SPlayVideoACK()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.MsgC2SPlayVideoACK)
}

void MsgC2SPlayVideoACK::InitAsDefaultInstance() {
}

MsgC2SPlayVideoACK::MsgC2SPlayVideoACK(const MsgC2SPlayVideoACK& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.MsgC2SPlayVideoACK)
}

void MsgC2SPlayVideoACK::SharedCtor() {
  _cached_size_ = 0;
  movie_id_ = GOOGLE_LONGLONG(0);
  video_id_ = GOOGLE_LONGLONG(0);
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgC2SPlayVideoACK::~MsgC2SPlayVideoACK() {
  // @@protoc_insertion_point(destructor:message.MsgC2SPlayVideoACK)
  SharedDtor();
}

void MsgC2SPlayVideoACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgC2SPlayVideoACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgC2SPlayVideoACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgC2SPlayVideoACK_descriptor_;
}

const MsgC2SPlayVideoACK& MsgC2SPlayVideoACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BodhiTV_2eproto();
  return *default_instance_;
}

MsgC2SPlayVideoACK* MsgC2SPlayVideoACK::default_instance_ = NULL;

MsgC2SPlayVideoACK* MsgC2SPlayVideoACK::New(::google::protobuf::Arena* arena) const {
  MsgC2SPlayVideoACK* n = new MsgC2SPlayVideoACK;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgC2SPlayVideoACK::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgC2SPlayVideoACK*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(movie_id_, error_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgC2SPlayVideoACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.MsgC2SPlayVideoACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 movie_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &movie_id_)));
          set_has_movie_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_video_id;
        break;
      }

      // required int64 video_id = 2;
      case 2: {
        if (tag == 16) {
         parse_video_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &video_id_)));
          set_has_video_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_error;
        break;
      }

      // required .message.MsgError error = 3 [default = MsgError_NO];
      case 3: {
        if (tag == 24) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::MsgError_IsValid(value)) {
            set_error(static_cast< ::message::MsgError >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.MsgC2SPlayVideoACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.MsgC2SPlayVideoACK)
  return false;
#undef DO_
}

void MsgC2SPlayVideoACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.MsgC2SPlayVideoACK)
  // required int64 movie_id = 1;
  if (has_movie_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->movie_id(), output);
  }

  // required int64 video_id = 2;
  if (has_video_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->video_id(), output);
  }

  // required .message.MsgError error = 3 [default = MsgError_NO];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.MsgC2SPlayVideoACK)
}

::google::protobuf::uint8* MsgC2SPlayVideoACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MsgC2SPlayVideoACK)
  // required int64 movie_id = 1;
  if (has_movie_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->movie_id(), target);
  }

  // required int64 video_id = 2;
  if (has_video_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->video_id(), target);
  }

  // required .message.MsgError error = 3 [default = MsgError_NO];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->error(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MsgC2SPlayVideoACK)
  return target;
}

int MsgC2SPlayVideoACK::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_movie_id()) {
    // required int64 movie_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->movie_id());
  }

  if (has_video_id()) {
    // required int64 video_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->video_id());
  }

  if (has_error()) {
    // required .message.MsgError error = 3 [default = MsgError_NO];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
  }

  return total_size;
}
int MsgC2SPlayVideoACK::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 movie_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->movie_id());

    // required int64 video_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->video_id());

    // required .message.MsgError error = 3 [default = MsgError_NO];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgC2SPlayVideoACK::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgC2SPlayVideoACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgC2SPlayVideoACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgC2SPlayVideoACK::MergeFrom(const MsgC2SPlayVideoACK& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_movie_id()) {
      set_movie_id(from.movie_id());
    }
    if (from.has_video_id()) {
      set_video_id(from.video_id());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgC2SPlayVideoACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgC2SPlayVideoACK::CopyFrom(const MsgC2SPlayVideoACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgC2SPlayVideoACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MsgC2SPlayVideoACK::Swap(MsgC2SPlayVideoACK* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgC2SPlayVideoACK::InternalSwap(MsgC2SPlayVideoACK* other) {
  std::swap(movie_id_, other->movie_id_);
  std::swap(video_id_, other->video_id_);
  std::swap(error_, other->error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgC2SPlayVideoACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgC2SPlayVideoACK_descriptor_;
  metadata.reflection = MsgC2SPlayVideoACK_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgC2SPlayVideoACK

// required int64 movie_id = 1;
 bool MsgC2SPlayVideoACK::has_movie_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void MsgC2SPlayVideoACK::set_has_movie_id() {
  _has_bits_[0] |= 0x00000001u;
}
 void MsgC2SPlayVideoACK::clear_has_movie_id() {
  _has_bits_[0] &= ~0x00000001u;
}
 void MsgC2SPlayVideoACK::clear_movie_id() {
  movie_id_ = GOOGLE_LONGLONG(0);
  clear_has_movie_id();
}
 ::google::protobuf::int64 MsgC2SPlayVideoACK::movie_id() const {
  // @@protoc_insertion_point(field_get:message.MsgC2SPlayVideoACK.movie_id)
  return movie_id_;
}
 void MsgC2SPlayVideoACK::set_movie_id(::google::protobuf::int64 value) {
  set_has_movie_id();
  movie_id_ = value;
  // @@protoc_insertion_point(field_set:message.MsgC2SPlayVideoACK.movie_id)
}

// required int64 video_id = 2;
 bool MsgC2SPlayVideoACK::has_video_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void MsgC2SPlayVideoACK::set_has_video_id() {
  _has_bits_[0] |= 0x00000002u;
}
 void MsgC2SPlayVideoACK::clear_has_video_id() {
  _has_bits_[0] &= ~0x00000002u;
}
 void MsgC2SPlayVideoACK::clear_video_id() {
  video_id_ = GOOGLE_LONGLONG(0);
  clear_has_video_id();
}
 ::google::protobuf::int64 MsgC2SPlayVideoACK::video_id() const {
  // @@protoc_insertion_point(field_get:message.MsgC2SPlayVideoACK.video_id)
  return video_id_;
}
 void MsgC2SPlayVideoACK::set_video_id(::google::protobuf::int64 value) {
  set_has_video_id();
  video_id_ = value;
  // @@protoc_insertion_point(field_set:message.MsgC2SPlayVideoACK.video_id)
}

// required .message.MsgError error = 3 [default = MsgError_NO];
 bool MsgC2SPlayVideoACK::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void MsgC2SPlayVideoACK::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
 void MsgC2SPlayVideoACK::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
 void MsgC2SPlayVideoACK::clear_error() {
  error_ = 0;
  clear_has_error();
}
 ::message::MsgError MsgC2SPlayVideoACK::error() const {
  // @@protoc_insertion_point(field_get:message.MsgC2SPlayVideoACK.error)
  return static_cast< ::message::MsgError >(error_);
}
 void MsgC2SPlayVideoACK::set_error(::message::MsgError value) {
  assert(::message::MsgError_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:message.MsgC2SPlayVideoACK.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MsgC2SReqStopVideo::kMovieIdFieldNumber;
const int MsgC2SReqStopVideo::kVideoIdFieldNumber;
const int MsgC2SReqStopVideo::kProgressFieldNumber;
#endif  // !_MSC_VER

MsgC2SReqStopVideo::MsgC2SReqStopVideo()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.MsgC2SReqStopVideo)
}

void MsgC2SReqStopVideo::InitAsDefaultInstance() {
}

MsgC2SReqStopVideo::MsgC2SReqStopVideo(const MsgC2SReqStopVideo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.MsgC2SReqStopVideo)
}

void MsgC2SReqStopVideo::SharedCtor() {
  _cached_size_ = 0;
  movie_id_ = GOOGLE_LONGLONG(0);
  video_id_ = GOOGLE_LONGLONG(0);
  progress_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgC2SReqStopVideo::~MsgC2SReqStopVideo() {
  // @@protoc_insertion_point(destructor:message.MsgC2SReqStopVideo)
  SharedDtor();
}

void MsgC2SReqStopVideo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgC2SReqStopVideo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgC2SReqStopVideo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgC2SReqStopVideo_descriptor_;
}

const MsgC2SReqStopVideo& MsgC2SReqStopVideo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BodhiTV_2eproto();
  return *default_instance_;
}

MsgC2SReqStopVideo* MsgC2SReqStopVideo::default_instance_ = NULL;

MsgC2SReqStopVideo* MsgC2SReqStopVideo::New(::google::protobuf::Arena* arena) const {
  MsgC2SReqStopVideo* n = new MsgC2SReqStopVideo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgC2SReqStopVideo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgC2SReqStopVideo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(movie_id_, progress_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgC2SReqStopVideo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.MsgC2SReqStopVideo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 movie_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &movie_id_)));
          set_has_movie_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_video_id;
        break;
      }

      // required int64 video_id = 2;
      case 2: {
        if (tag == 16) {
         parse_video_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &video_id_)));
          set_has_video_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_progress;
        break;
      }

      // required int32 progress = 3;
      case 3: {
        if (tag == 24) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.MsgC2SReqStopVideo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.MsgC2SReqStopVideo)
  return false;
#undef DO_
}

void MsgC2SReqStopVideo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.MsgC2SReqStopVideo)
  // required int64 movie_id = 1;
  if (has_movie_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->movie_id(), output);
  }

  // required int64 video_id = 2;
  if (has_video_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->video_id(), output);
  }

  // required int32 progress = 3;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->progress(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.MsgC2SReqStopVideo)
}

::google::protobuf::uint8* MsgC2SReqStopVideo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MsgC2SReqStopVideo)
  // required int64 movie_id = 1;
  if (has_movie_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->movie_id(), target);
  }

  // required int64 video_id = 2;
  if (has_video_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->video_id(), target);
  }

  // required int32 progress = 3;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->progress(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MsgC2SReqStopVideo)
  return target;
}

int MsgC2SReqStopVideo::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_movie_id()) {
    // required int64 movie_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->movie_id());
  }

  if (has_video_id()) {
    // required int64 video_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->video_id());
  }

  if (has_progress()) {
    // required int32 progress = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->progress());
  }

  return total_size;
}
int MsgC2SReqStopVideo::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 movie_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->movie_id());

    // required int64 video_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->video_id());

    // required int32 progress = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->progress());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgC2SReqStopVideo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgC2SReqStopVideo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgC2SReqStopVideo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgC2SReqStopVideo::MergeFrom(const MsgC2SReqStopVideo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_movie_id()) {
      set_movie_id(from.movie_id());
    }
    if (from.has_video_id()) {
      set_video_id(from.video_id());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgC2SReqStopVideo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgC2SReqStopVideo::CopyFrom(const MsgC2SReqStopVideo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgC2SReqStopVideo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MsgC2SReqStopVideo::Swap(MsgC2SReqStopVideo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgC2SReqStopVideo::InternalSwap(MsgC2SReqStopVideo* other) {
  std::swap(movie_id_, other->movie_id_);
  std::swap(video_id_, other->video_id_);
  std::swap(progress_, other->progress_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgC2SReqStopVideo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgC2SReqStopVideo_descriptor_;
  metadata.reflection = MsgC2SReqStopVideo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgC2SReqStopVideo

// required int64 movie_id = 1;
 bool MsgC2SReqStopVideo::has_movie_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void MsgC2SReqStopVideo::set_has_movie_id() {
  _has_bits_[0] |= 0x00000001u;
}
 void MsgC2SReqStopVideo::clear_has_movie_id() {
  _has_bits_[0] &= ~0x00000001u;
}
 void MsgC2SReqStopVideo::clear_movie_id() {
  movie_id_ = GOOGLE_LONGLONG(0);
  clear_has_movie_id();
}
 ::google::protobuf::int64 MsgC2SReqStopVideo::movie_id() const {
  // @@protoc_insertion_point(field_get:message.MsgC2SReqStopVideo.movie_id)
  return movie_id_;
}
 void MsgC2SReqStopVideo::set_movie_id(::google::protobuf::int64 value) {
  set_has_movie_id();
  movie_id_ = value;
  // @@protoc_insertion_point(field_set:message.MsgC2SReqStopVideo.movie_id)
}

// required int64 video_id = 2;
 bool MsgC2SReqStopVideo::has_video_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void MsgC2SReqStopVideo::set_has_video_id() {
  _has_bits_[0] |= 0x00000002u;
}
 void MsgC2SReqStopVideo::clear_has_video_id() {
  _has_bits_[0] &= ~0x00000002u;
}
 void MsgC2SReqStopVideo::clear_video_id() {
  video_id_ = GOOGLE_LONGLONG(0);
  clear_has_video_id();
}
 ::google::protobuf::int64 MsgC2SReqStopVideo::video_id() const {
  // @@protoc_insertion_point(field_get:message.MsgC2SReqStopVideo.video_id)
  return video_id_;
}
 void MsgC2SReqStopVideo::set_video_id(::google::protobuf::int64 value) {
  set_has_video_id();
  video_id_ = value;
  // @@protoc_insertion_point(field_set:message.MsgC2SReqStopVideo.video_id)
}

// required int32 progress = 3;
 bool MsgC2SReqStopVideo::has_progress() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void MsgC2SReqStopVideo::set_has_progress() {
  _has_bits_[0] |= 0x00000004u;
}
 void MsgC2SReqStopVideo::clear_has_progress() {
  _has_bits_[0] &= ~0x00000004u;
}
 void MsgC2SReqStopVideo::clear_progress() {
  progress_ = 0;
  clear_has_progress();
}
 ::google::protobuf::int32 MsgC2SReqStopVideo::progress() const {
  // @@protoc_insertion_point(field_get:message.MsgC2SReqStopVideo.progress)
  return progress_;
}
 void MsgC2SReqStopVideo::set_progress(::google::protobuf::int32 value) {
  set_has_progress();
  progress_ = value;
  // @@protoc_insertion_point(field_set:message.MsgC2SReqStopVideo.progress)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MsgC2SStopVideoACK::kMovieIdFieldNumber;
const int MsgC2SStopVideoACK::kVideoIdFieldNumber;
const int MsgC2SStopVideoACK::kErrorFieldNumber;
#endif  // !_MSC_VER

MsgC2SStopVideoACK::MsgC2SStopVideoACK()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.MsgC2SStopVideoACK)
}

void MsgC2SStopVideoACK::InitAsDefaultInstance() {
}

MsgC2SStopVideoACK::MsgC2SStopVideoACK(const MsgC2SStopVideoACK& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.MsgC2SStopVideoACK)
}

void MsgC2SStopVideoACK::SharedCtor() {
  _cached_size_ = 0;
  movie_id_ = GOOGLE_LONGLONG(0);
  video_id_ = GOOGLE_LONGLONG(0);
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgC2SStopVideoACK::~MsgC2SStopVideoACK() {
  // @@protoc_insertion_point(destructor:message.MsgC2SStopVideoACK)
  SharedDtor();
}

void MsgC2SStopVideoACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgC2SStopVideoACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgC2SStopVideoACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgC2SStopVideoACK_descriptor_;
}

const MsgC2SStopVideoACK& MsgC2SStopVideoACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BodhiTV_2eproto();
  return *default_instance_;
}

MsgC2SStopVideoACK* MsgC2SStopVideoACK::default_instance_ = NULL;

MsgC2SStopVideoACK* MsgC2SStopVideoACK::New(::google::protobuf::Arena* arena) const {
  MsgC2SStopVideoACK* n = new MsgC2SStopVideoACK;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgC2SStopVideoACK::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgC2SStopVideoACK*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(movie_id_, error_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgC2SStopVideoACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.MsgC2SStopVideoACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 movie_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &movie_id_)));
          set_has_movie_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_video_id;
        break;
      }

      // required int64 video_id = 2;
      case 2: {
        if (tag == 16) {
         parse_video_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &video_id_)));
          set_has_video_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_error;
        break;
      }

      // required .message.MsgError error = 3 [default = MsgError_NO];
      case 3: {
        if (tag == 24) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::MsgError_IsValid(value)) {
            set_error(static_cast< ::message::MsgError >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.MsgC2SStopVideoACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.MsgC2SStopVideoACK)
  return false;
#undef DO_
}

void MsgC2SStopVideoACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.MsgC2SStopVideoACK)
  // required int64 movie_id = 1;
  if (has_movie_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->movie_id(), output);
  }

  // required int64 video_id = 2;
  if (has_video_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->video_id(), output);
  }

  // required .message.MsgError error = 3 [default = MsgError_NO];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.MsgC2SStopVideoACK)
}

::google::protobuf::uint8* MsgC2SStopVideoACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MsgC2SStopVideoACK)
  // required int64 movie_id = 1;
  if (has_movie_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->movie_id(), target);
  }

  // required int64 video_id = 2;
  if (has_video_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->video_id(), target);
  }

  // required .message.MsgError error = 3 [default = MsgError_NO];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->error(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MsgC2SStopVideoACK)
  return target;
}

int MsgC2SStopVideoACK::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_movie_id()) {
    // required int64 movie_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->movie_id());
  }

  if (has_video_id()) {
    // required int64 video_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->video_id());
  }

  if (has_error()) {
    // required .message.MsgError error = 3 [default = MsgError_NO];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
  }

  return total_size;
}
int MsgC2SStopVideoACK::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 movie_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->movie_id());

    // required int64 video_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->video_id());

    // required .message.MsgError error = 3 [default = MsgError_NO];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgC2SStopVideoACK::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgC2SStopVideoACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgC2SStopVideoACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgC2SStopVideoACK::MergeFrom(const MsgC2SStopVideoACK& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_movie_id()) {
      set_movie_id(from.movie_id());
    }
    if (from.has_video_id()) {
      set_video_id(from.video_id());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgC2SStopVideoACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgC2SStopVideoACK::CopyFrom(const MsgC2SStopVideoACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgC2SStopVideoACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MsgC2SStopVideoACK::Swap(MsgC2SStopVideoACK* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgC2SStopVideoACK::InternalSwap(MsgC2SStopVideoACK* other) {
  std::swap(movie_id_, other->movie_id_);
  std::swap(video_id_, other->video_id_);
  std::swap(error_, other->error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgC2SStopVideoACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgC2SStopVideoACK_descriptor_;
  metadata.reflection = MsgC2SStopVideoACK_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgC2SStopVideoACK

// required int64 movie_id = 1;
 bool MsgC2SStopVideoACK::has_movie_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void MsgC2SStopVideoACK::set_has_movie_id() {
  _has_bits_[0] |= 0x00000001u;
}
 void MsgC2SStopVideoACK::clear_has_movie_id() {
  _has_bits_[0] &= ~0x00000001u;
}
 void MsgC2SStopVideoACK::clear_movie_id() {
  movie_id_ = GOOGLE_LONGLONG(0);
  clear_has_movie_id();
}
 ::google::protobuf::int64 MsgC2SStopVideoACK::movie_id() const {
  // @@protoc_insertion_point(field_get:message.MsgC2SStopVideoACK.movie_id)
  return movie_id_;
}
 void MsgC2SStopVideoACK::set_movie_id(::google::protobuf::int64 value) {
  set_has_movie_id();
  movie_id_ = value;
  // @@protoc_insertion_point(field_set:message.MsgC2SStopVideoACK.movie_id)
}

// required int64 video_id = 2;
 bool MsgC2SStopVideoACK::has_video_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void MsgC2SStopVideoACK::set_has_video_id() {
  _has_bits_[0] |= 0x00000002u;
}
 void MsgC2SStopVideoACK::clear_has_video_id() {
  _has_bits_[0] &= ~0x00000002u;
}
 void MsgC2SStopVideoACK::clear_video_id() {
  video_id_ = GOOGLE_LONGLONG(0);
  clear_has_video_id();
}
 ::google::protobuf::int64 MsgC2SStopVideoACK::video_id() const {
  // @@protoc_insertion_point(field_get:message.MsgC2SStopVideoACK.video_id)
  return video_id_;
}
 void MsgC2SStopVideoACK::set_video_id(::google::protobuf::int64 value) {
  set_has_video_id();
  video_id_ = value;
  // @@protoc_insertion_point(field_set:message.MsgC2SStopVideoACK.video_id)
}

// required .message.MsgError error = 3 [default = MsgError_NO];
 bool MsgC2SStopVideoACK::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void MsgC2SStopVideoACK::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
 void MsgC2SStopVideoACK::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
 void MsgC2SStopVideoACK::clear_error() {
  error_ = 0;
  clear_has_error();
}
 ::message::MsgError MsgC2SStopVideoACK::error() const {
  // @@protoc_insertion_point(field_get:message.MsgC2SStopVideoACK.error)
  return static_cast< ::message::MsgError >(error_);
}
 void MsgC2SStopVideoACK::set_error(::message::MsgError value) {
  assert(::message::MsgError_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:message.MsgC2SStopVideoACK.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MsgC2SReqAddMovieToFavourite::kMovieIdFieldNumber;
#endif  // !_MSC_VER

MsgC2SReqAddMovieToFavourite::MsgC2SReqAddMovieToFavourite()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.MsgC2SReqAddMovieToFavourite)
}

void MsgC2SReqAddMovieToFavourite::InitAsDefaultInstance() {
}

MsgC2SReqAddMovieToFavourite::MsgC2SReqAddMovieToFavourite(const MsgC2SReqAddMovieToFavourite& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.MsgC2SReqAddMovieToFavourite)
}

void MsgC2SReqAddMovieToFavourite::SharedCtor() {
  _cached_size_ = 0;
  movie_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgC2SReqAddMovieToFavourite::~MsgC2SReqAddMovieToFavourite() {
  // @@protoc_insertion_point(destructor:message.MsgC2SReqAddMovieToFavourite)
  SharedDtor();
}

void MsgC2SReqAddMovieToFavourite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgC2SReqAddMovieToFavourite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgC2SReqAddMovieToFavourite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgC2SReqAddMovieToFavourite_descriptor_;
}

const MsgC2SReqAddMovieToFavourite& MsgC2SReqAddMovieToFavourite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BodhiTV_2eproto();
  return *default_instance_;
}

MsgC2SReqAddMovieToFavourite* MsgC2SReqAddMovieToFavourite::default_instance_ = NULL;

MsgC2SReqAddMovieToFavourite* MsgC2SReqAddMovieToFavourite::New(::google::protobuf::Arena* arena) const {
  MsgC2SReqAddMovieToFavourite* n = new MsgC2SReqAddMovieToFavourite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgC2SReqAddMovieToFavourite::Clear() {
  movie_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgC2SReqAddMovieToFavourite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.MsgC2SReqAddMovieToFavourite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 movie_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &movie_id_)));
          set_has_movie_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.MsgC2SReqAddMovieToFavourite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.MsgC2SReqAddMovieToFavourite)
  return false;
#undef DO_
}

void MsgC2SReqAddMovieToFavourite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.MsgC2SReqAddMovieToFavourite)
  // required int64 movie_id = 1;
  if (has_movie_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->movie_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.MsgC2SReqAddMovieToFavourite)
}

::google::protobuf::uint8* MsgC2SReqAddMovieToFavourite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MsgC2SReqAddMovieToFavourite)
  // required int64 movie_id = 1;
  if (has_movie_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->movie_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MsgC2SReqAddMovieToFavourite)
  return target;
}

int MsgC2SReqAddMovieToFavourite::ByteSize() const {
  int total_size = 0;

  // required int64 movie_id = 1;
  if (has_movie_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->movie_id());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgC2SReqAddMovieToFavourite::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgC2SReqAddMovieToFavourite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgC2SReqAddMovieToFavourite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgC2SReqAddMovieToFavourite::MergeFrom(const MsgC2SReqAddMovieToFavourite& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_movie_id()) {
      set_movie_id(from.movie_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgC2SReqAddMovieToFavourite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgC2SReqAddMovieToFavourite::CopyFrom(const MsgC2SReqAddMovieToFavourite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgC2SReqAddMovieToFavourite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgC2SReqAddMovieToFavourite::Swap(MsgC2SReqAddMovieToFavourite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgC2SReqAddMovieToFavourite::InternalSwap(MsgC2SReqAddMovieToFavourite* other) {
  std::swap(movie_id_, other->movie_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgC2SReqAddMovieToFavourite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgC2SReqAddMovieToFavourite_descriptor_;
  metadata.reflection = MsgC2SReqAddMovieToFavourite_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgC2SReqAddMovieToFavourite

// required int64 movie_id = 1;
 bool MsgC2SReqAddMovieToFavourite::has_movie_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void MsgC2SReqAddMovieToFavourite::set_has_movie_id() {
  _has_bits_[0] |= 0x00000001u;
}
 void MsgC2SReqAddMovieToFavourite::clear_has_movie_id() {
  _has_bits_[0] &= ~0x00000001u;
}
 void MsgC2SReqAddMovieToFavourite::clear_movie_id() {
  movie_id_ = GOOGLE_LONGLONG(0);
  clear_has_movie_id();
}
 ::google::protobuf::int64 MsgC2SReqAddMovieToFavourite::movie_id() const {
  // @@protoc_insertion_point(field_get:message.MsgC2SReqAddMovieToFavourite.movie_id)
  return movie_id_;
}
 void MsgC2SReqAddMovieToFavourite::set_movie_id(::google::protobuf::int64 value) {
  set_has_movie_id();
  movie_id_ = value;
  // @@protoc_insertion_point(field_set:message.MsgC2SReqAddMovieToFavourite.movie_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MsgS2CAddMovieToFavouriteACK::kMovieIdFieldNumber;
const int MsgS2CAddMovieToFavouriteACK::kErrorFieldNumber;
#endif  // !_MSC_VER

MsgS2CAddMovieToFavouriteACK::MsgS2CAddMovieToFavouriteACK()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.MsgS2CAddMovieToFavouriteACK)
}

void MsgS2CAddMovieToFavouriteACK::InitAsDefaultInstance() {
}

MsgS2CAddMovieToFavouriteACK::MsgS2CAddMovieToFavouriteACK(const MsgS2CAddMovieToFavouriteACK& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.MsgS2CAddMovieToFavouriteACK)
}

void MsgS2CAddMovieToFavouriteACK::SharedCtor() {
  _cached_size_ = 0;
  movie_id_ = GOOGLE_LONGLONG(0);
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgS2CAddMovieToFavouriteACK::~MsgS2CAddMovieToFavouriteACK() {
  // @@protoc_insertion_point(destructor:message.MsgS2CAddMovieToFavouriteACK)
  SharedDtor();
}

void MsgS2CAddMovieToFavouriteACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgS2CAddMovieToFavouriteACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgS2CAddMovieToFavouriteACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgS2CAddMovieToFavouriteACK_descriptor_;
}

const MsgS2CAddMovieToFavouriteACK& MsgS2CAddMovieToFavouriteACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BodhiTV_2eproto();
  return *default_instance_;
}

MsgS2CAddMovieToFavouriteACK* MsgS2CAddMovieToFavouriteACK::default_instance_ = NULL;

MsgS2CAddMovieToFavouriteACK* MsgS2CAddMovieToFavouriteACK::New(::google::protobuf::Arena* arena) const {
  MsgS2CAddMovieToFavouriteACK* n = new MsgS2CAddMovieToFavouriteACK;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgS2CAddMovieToFavouriteACK::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgS2CAddMovieToFavouriteACK*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(movie_id_, error_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgS2CAddMovieToFavouriteACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.MsgS2CAddMovieToFavouriteACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 movie_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &movie_id_)));
          set_has_movie_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // required .message.MsgError error = 2 [default = MsgError_NO];
      case 2: {
        if (tag == 16) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::MsgError_IsValid(value)) {
            set_error(static_cast< ::message::MsgError >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.MsgS2CAddMovieToFavouriteACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.MsgS2CAddMovieToFavouriteACK)
  return false;
#undef DO_
}

void MsgS2CAddMovieToFavouriteACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.MsgS2CAddMovieToFavouriteACK)
  // required int64 movie_id = 1;
  if (has_movie_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->movie_id(), output);
  }

  // required .message.MsgError error = 2 [default = MsgError_NO];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.MsgS2CAddMovieToFavouriteACK)
}

::google::protobuf::uint8* MsgS2CAddMovieToFavouriteACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MsgS2CAddMovieToFavouriteACK)
  // required int64 movie_id = 1;
  if (has_movie_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->movie_id(), target);
  }

  // required .message.MsgError error = 2 [default = MsgError_NO];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->error(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MsgS2CAddMovieToFavouriteACK)
  return target;
}

int MsgS2CAddMovieToFavouriteACK::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_movie_id()) {
    // required int64 movie_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->movie_id());
  }

  if (has_error()) {
    // required .message.MsgError error = 2 [default = MsgError_NO];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
  }

  return total_size;
}
int MsgS2CAddMovieToFavouriteACK::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 movie_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->movie_id());

    // required .message.MsgError error = 2 [default = MsgError_NO];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgS2CAddMovieToFavouriteACK::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgS2CAddMovieToFavouriteACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgS2CAddMovieToFavouriteACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgS2CAddMovieToFavouriteACK::MergeFrom(const MsgS2CAddMovieToFavouriteACK& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_movie_id()) {
      set_movie_id(from.movie_id());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgS2CAddMovieToFavouriteACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgS2CAddMovieToFavouriteACK::CopyFrom(const MsgS2CAddMovieToFavouriteACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgS2CAddMovieToFavouriteACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgS2CAddMovieToFavouriteACK::Swap(MsgS2CAddMovieToFavouriteACK* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgS2CAddMovieToFavouriteACK::InternalSwap(MsgS2CAddMovieToFavouriteACK* other) {
  std::swap(movie_id_, other->movie_id_);
  std::swap(error_, other->error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgS2CAddMovieToFavouriteACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgS2CAddMovieToFavouriteACK_descriptor_;
  metadata.reflection = MsgS2CAddMovieToFavouriteACK_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgS2CAddMovieToFavouriteACK

// required int64 movie_id = 1;
 bool MsgS2CAddMovieToFavouriteACK::has_movie_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void MsgS2CAddMovieToFavouriteACK::set_has_movie_id() {
  _has_bits_[0] |= 0x00000001u;
}
 void MsgS2CAddMovieToFavouriteACK::clear_has_movie_id() {
  _has_bits_[0] &= ~0x00000001u;
}
 void MsgS2CAddMovieToFavouriteACK::clear_movie_id() {
  movie_id_ = GOOGLE_LONGLONG(0);
  clear_has_movie_id();
}
 ::google::protobuf::int64 MsgS2CAddMovieToFavouriteACK::movie_id() const {
  // @@protoc_insertion_point(field_get:message.MsgS2CAddMovieToFavouriteACK.movie_id)
  return movie_id_;
}
 void MsgS2CAddMovieToFavouriteACK::set_movie_id(::google::protobuf::int64 value) {
  set_has_movie_id();
  movie_id_ = value;
  // @@protoc_insertion_point(field_set:message.MsgS2CAddMovieToFavouriteACK.movie_id)
}

// required .message.MsgError error = 2 [default = MsgError_NO];
 bool MsgS2CAddMovieToFavouriteACK::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void MsgS2CAddMovieToFavouriteACK::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
 void MsgS2CAddMovieToFavouriteACK::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
 void MsgS2CAddMovieToFavouriteACK::clear_error() {
  error_ = 0;
  clear_has_error();
}
 ::message::MsgError MsgS2CAddMovieToFavouriteACK::error() const {
  // @@protoc_insertion_point(field_get:message.MsgS2CAddMovieToFavouriteACK.error)
  return static_cast< ::message::MsgError >(error_);
}
 void MsgS2CAddMovieToFavouriteACK::set_error(::message::MsgError value) {
  assert(::message::MsgError_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:message.MsgS2CAddMovieToFavouriteACK.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
